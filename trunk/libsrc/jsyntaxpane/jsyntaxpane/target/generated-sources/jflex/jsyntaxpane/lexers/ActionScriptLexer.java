/* The following code was generated by JFlex 1.4.3 on 1.3.13 22:20 */

/*
 * Copyright 2008 Ayman Al-Sairafi ayman.alsairafi@gmail.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License
 *       at http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package jsyntaxpane.lexers;


import jsyntaxpane.Token;
import jsyntaxpane.TokenType;
 

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 1.3.13 22:20 from the specification file
 * <tt>D:/Dokumenty/Programovani/JavaSE/FFDec/trunk/libsrc/jsyntaxpane/jsyntaxpane/src/main/jflex/jsyntaxpane/lexers/actionscript.flex</tt>
 */
public final class ActionScriptLexer extends DefaultJFlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int XML = 8;
  public static final int XMLSTARTTAG = 6;
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4, 4
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\14\1\67"+
    "\1\16\1\0\1\6\1\67\1\70\1\31\1\60\1\61\1\5\1\72"+
    "\1\66\1\27\1\11\1\4\1\17\3\24\4\25\2\20\1\10\1\66"+
    "\1\12\1\15\1\13\1\66\1\66\3\22\1\73\1\26\1\22\21\6"+
    "\1\21\2\6\1\64\1\30\1\65\1\67\1\6\1\0\1\34\1\32"+
    "\1\36\1\45\1\23\1\46\1\57\1\51\1\43\1\6\1\35\1\47"+
    "\1\54\1\41\1\40\1\52\1\6\1\33\1\37\1\42\1\44\1\55"+
    "\1\50\1\56\1\53\1\6\1\62\1\71\1\63\1\66\41\7\2\0"+
    "\4\6\4\0\1\6\2\0\1\7\7\0\1\6\4\0\1\6\5\0"+
    "\27\6\1\0\37\6\1\0\u013f\6\31\0\162\6\4\0\14\6\16\0"+
    "\5\6\11\0\1\6\21\0\130\7\5\0\23\7\12\0\1\6\13\0"+
    "\1\6\1\0\3\6\1\0\1\6\1\0\24\6\1\0\54\6\1\0"+
    "\46\6\1\0\5\6\4\0\202\6\1\0\4\7\3\0\105\6\1\0"+
    "\46\6\2\0\2\6\6\0\20\6\41\0\46\6\2\0\1\6\7\0"+
    "\47\6\11\0\21\7\1\0\27\7\1\0\3\7\1\0\1\7\1\0"+
    "\2\7\1\0\1\7\13\0\33\6\5\0\3\6\15\0\4\7\14\0"+
    "\6\7\13\0\32\6\5\0\13\6\16\7\7\0\12\7\4\0\2\6"+
    "\1\7\143\6\1\0\1\6\10\7\1\0\6\7\2\6\2\7\1\0"+
    "\4\7\2\6\12\7\3\6\2\0\1\6\17\0\1\7\1\6\1\7"+
    "\36\6\33\7\2\0\3\6\60\0\46\6\13\7\1\6\u014f\0\3\7"+
    "\66\6\2\0\1\7\1\6\20\7\2\0\1\6\4\7\3\0\12\6"+
    "\2\7\2\0\12\7\21\0\3\7\1\0\10\6\2\0\2\6\2\0"+
    "\26\6\1\0\7\6\1\0\1\6\3\0\4\6\2\0\1\7\1\6"+
    "\7\7\2\0\2\7\2\0\3\7\11\0\1\7\4\0\2\6\1\0"+
    "\3\6\2\7\2\0\12\7\4\6\15\0\3\7\1\0\6\6\4\0"+
    "\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\2\6\1\0"+
    "\2\6\2\0\1\7\1\0\5\7\4\0\2\7\2\0\3\7\13\0"+
    "\4\6\1\0\1\6\7\0\14\7\3\6\14\0\3\7\1\0\11\6"+
    "\1\0\3\6\1\0\26\6\1\0\7\6\1\0\2\6\1\0\5\6"+
    "\2\0\1\7\1\6\10\7\1\0\3\7\1\0\3\7\2\0\1\6"+
    "\17\0\2\6\2\7\2\0\12\7\1\0\1\6\17\0\3\7\1\0"+
    "\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0"+
    "\5\6\2\0\1\7\1\6\6\7\3\0\2\7\2\0\3\7\10\0"+
    "\2\7\4\0\2\6\1\0\3\6\4\0\12\7\1\0\1\6\20\0"+
    "\1\7\1\6\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6"+
    "\1\0\1\6\1\0\2\6\3\0\2\6\3\0\3\6\3\0\10\6"+
    "\1\0\3\6\4\0\5\7\3\0\3\7\1\0\4\7\11\0\1\7"+
    "\17\0\11\7\11\0\1\6\7\0\3\7\1\0\10\6\1\0\3\6"+
    "\1\0\27\6\1\0\12\6\1\0\5\6\4\0\7\7\1\0\3\7"+
    "\1\0\4\7\7\0\2\7\11\0\2\6\4\0\12\7\22\0\2\7"+
    "\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6"+
    "\2\0\1\7\1\6\7\7\1\0\3\7\1\0\4\7\7\0\2\7"+
    "\7\0\1\6\1\0\2\6\4\0\12\7\22\0\2\7\1\0\10\6"+
    "\1\0\3\6\1\0\27\6\1\0\20\6\4\0\6\7\2\0\3\7"+
    "\1\0\4\7\11\0\1\7\10\0\2\6\4\0\12\7\22\0\2\7"+
    "\1\0\22\6\3\0\30\6\1\0\11\6\1\0\1\6\2\0\7\6"+
    "\3\0\1\7\4\0\6\7\1\0\1\7\1\0\10\7\22\0\2\7"+
    "\15\0\60\6\1\7\2\6\7\7\4\0\10\6\10\7\1\0\12\7"+
    "\47\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6"+
    "\6\0\4\6\1\0\7\6\1\0\3\6\1\0\1\6\1\0\1\6"+
    "\2\0\2\6\1\0\4\6\1\7\2\6\6\7\1\0\2\7\1\6"+
    "\2\0\5\6\1\0\1\6\1\0\6\7\2\0\12\7\2\0\2\6"+
    "\42\0\1\6\27\0\2\7\6\0\12\7\13\0\1\7\1\0\1\7"+
    "\1\0\1\7\4\0\2\7\10\6\1\0\42\6\6\0\24\7\1\0"+
    "\2\7\4\6\4\0\10\7\1\0\44\7\11\0\1\7\71\0\42\6"+
    "\1\0\5\6\1\0\2\6\1\0\7\7\3\0\4\7\6\0\12\7"+
    "\6\0\6\6\4\7\106\0\46\6\12\0\51\6\7\0\132\6\5\0"+
    "\104\6\5\0\122\6\6\0\7\6\1\0\77\6\1\0\1\6\1\0"+
    "\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\47\6\1\0"+
    "\1\6\1\0\4\6\2\0\37\6\1\0\1\6\1\0\4\6\2\0"+
    "\7\6\1\0\1\6\1\0\4\6\2\0\7\6\1\0\7\6\1\0"+
    "\27\6\1\0\37\6\1\0\1\6\1\0\4\6\2\0\7\6\1\0"+
    "\47\6\1\0\23\6\16\0\11\7\56\0\125\6\14\0\u026c\6\2\0"+
    "\10\6\12\0\32\6\5\0\113\6\3\0\3\6\17\0\15\6\1\0"+
    "\4\6\3\7\13\0\22\6\3\7\13\0\22\6\2\7\14\0\15\6"+
    "\1\0\3\6\1\0\2\7\14\0\64\6\40\7\3\0\1\6\3\0"+
    "\2\6\1\7\2\0\12\7\41\0\3\7\2\0\12\7\6\0\130\6"+
    "\10\0\51\6\1\7\126\0\35\6\3\0\14\7\4\0\14\7\12\0"+
    "\12\7\36\6\2\0\5\6\u038b\0\154\6\224\0\234\6\4\0\132\6"+
    "\6\0\26\6\2\0\6\6\2\0\46\6\2\0\6\6\2\0\10\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\1\0\37\6\2\0\65\6"+
    "\1\0\7\6\1\0\1\6\3\0\3\6\1\0\7\6\3\0\4\6"+
    "\2\0\6\6\4\0\15\6\5\0\3\6\1\0\7\6\17\0\4\7"+
    "\32\0\5\7\20\0\2\6\23\0\1\6\13\0\4\7\6\0\6\7"+
    "\1\0\1\6\15\0\1\6\40\0\22\6\36\0\15\7\4\0\1\7"+
    "\3\0\6\7\27\0\1\6\4\0\1\6\2\0\12\6\1\0\1\6"+
    "\3\0\5\6\6\0\1\6\1\0\1\6\1\0\1\6\1\0\4\6"+
    "\1\0\3\6\1\0\7\6\3\0\3\6\5\0\5\6\26\0\44\6"+
    "\u0e81\0\3\6\31\0\11\6\6\7\1\0\5\6\2\0\5\6\4\0"+
    "\126\6\2\0\2\7\2\0\3\6\1\0\137\6\5\0\50\6\4\0"+
    "\136\6\21\0\30\6\70\0\20\6\u0200\0\u19b6\6\112\0\u51a6\6\132\0"+
    "\u048d\6\u0773\0\u2ba4\6\u215c\0\u012e\6\2\0\73\6\225\0\7\6\14\0"+
    "\5\6\5\0\1\6\1\7\12\6\1\0\15\6\1\0\5\6\1\0"+
    "\1\6\1\0\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6\22\0"+
    "\100\6\2\0\66\6\50\0\15\6\3\0\20\7\20\0\4\7\17\0"+
    "\2\6\30\0\3\6\31\0\1\6\6\0\5\6\1\0\207\6\2\0"+
    "\1\7\4\0\1\6\13\0\12\7\7\0\32\6\4\0\1\6\1\0"+
    "\32\6\12\0\132\6\3\0\6\6\2\0\6\6\2\0\6\6\2\0"+
    "\3\6\3\0\2\6\3\0\2\6\22\0\3\7\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\5\0\3\1\2\2\1\3\4\2\1\4\2\5\1\3"+
    "\1\2\1\6\21\3\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\4\2\1\15\2\16\1\17\1\1\1\15\1\1"+
    "\3\15\1\1\1\20\2\15\1\21\3\0\1\5\1\0"+
    "\1\2\2\0\1\5\4\3\1\2\16\3\2\22\17\3"+
    "\1\23\2\15\6\0\2\21\5\0\1\24\1\0\3\5"+
    "\1\0\40\3\7\0\1\3\5\0\1\5\27\3\1\15"+
    "\1\0\1\25\12\0\1\5\15\3\1\22\4\3\10\0"+
    "\1\5\10\3\2\0\1\24\1\5\3\3\1\15\1\5"+
    "\2\3\1\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[260];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\170\0\264\0\360\0\u012c\0\u0168\0\u01a4"+
    "\0\u01e0\0\u021c\0\u0258\0\u0294\0\u02d0\0\u030c\0\u0348\0\u012c"+
    "\0\u0384\0\u03c0\0\u03fc\0\u0438\0\u012c\0\u0474\0\u04b0\0\u04ec"+
    "\0\u0528\0\u0564\0\u05a0\0\u05dc\0\u0618\0\u0654\0\u0690\0\u06cc"+
    "\0\u0708\0\u0744\0\u0780\0\u07bc\0\u07f8\0\u0834\0\u012c\0\u012c"+
    "\0\u012c\0\u012c\0\u012c\0\u012c\0\u012c\0\u0870\0\u08ac\0\u08e8"+
    "\0\u0924\0\u0960\0\u012c\0\u012c\0\u099c\0\u09d8\0\u0a14\0\u0a50"+
    "\0\u012c\0\u0a8c\0\u0ac8\0\u012c\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8"+
    "\0\u0bf4\0\u0c30\0\u0c6c\0\u0ca8\0\u0ce4\0\u0d20\0\u0d5c\0\u012c"+
    "\0\u0d98\0\u0dd4\0\u0e10\0\u0e4c\0\u0258\0\u0e88\0\u0ec4\0\u0f00"+
    "\0\u0f3c\0\u0f78\0\u0fb4\0\u0ff0\0\u102c\0\u1068\0\u10a4\0\u10e0"+
    "\0\u111c\0\u1158\0\u1194\0\u11d0\0\u0258\0\u120c\0\u1248\0\u1284"+
    "\0\u12c0\0\u12fc\0\u1338\0\u1374\0\u13b0\0\u13ec\0\u1428\0\u1464"+
    "\0\u14a0\0\u14dc\0\u1518\0\u1554\0\u012c\0\u1590\0\u15cc\0\u0ac8"+
    "\0\u1608\0\u1644\0\u1680\0\u16bc\0\u16f8\0\u1734\0\u012c\0\u1770"+
    "\0\u17ac\0\u17e8\0\u1824\0\u1860\0\u012c\0\u189c\0\u0d20\0\u18d8"+
    "\0\u1914\0\u1950\0\u198c\0\u19c8\0\u1a04\0\u1a40\0\u1a7c\0\u1ab8"+
    "\0\u1af4\0\u1b30\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20\0\u1c5c\0\u1c98"+
    "\0\u1cd4\0\u1d10\0\u1d4c\0\u1d88\0\u1dc4\0\u1e00\0\u1e3c\0\u1e78"+
    "\0\u1eb4\0\u1ef0\0\u1f2c\0\u1f68\0\u1fa4\0\u1fe0\0\u201c\0\u2058"+
    "\0\u2094\0\u20d0\0\u210c\0\u2148\0\u2184\0\u21c0\0\u21fc\0\u2238"+
    "\0\u2274\0\u012c\0\u22b0\0\u22ec\0\u2328\0\u2364\0\u23a0\0\u23dc"+
    "\0\u2418\0\u2454\0\u2490\0\u24cc\0\u2508\0\u2544\0\u2580\0\u25bc"+
    "\0\u25f8\0\u2634\0\u2670\0\u26ac\0\u26e8\0\u2724\0\u2760\0\u279c"+
    "\0\u27d8\0\u2814\0\u2850\0\u288c\0\u28c8\0\u2904\0\u2940\0\u297c"+
    "\0\u29b8\0\u012c\0\u29f4\0\u2a30\0\u2a6c\0\u2aa8\0\u2ae4\0\u2b20"+
    "\0\u2b5c\0\u2b98\0\u2bd4\0\u2c10\0\u2c4c\0\u2c88\0\u2cc4\0\u2d00"+
    "\0\u2d3c\0\u2d78\0\u2db4\0\u2df0\0\u2e2c\0\u2e68\0\u2ea4\0\u2ee0"+
    "\0\u2f1c\0\u2f58\0\u2f94\0\u2fd0\0\u300c\0\u3048\0\u3084\0\u30c0"+
    "\0\u30fc\0\u3138\0\u3174\0\u31b0\0\u31ec\0\u3228\0\u3264\0\u32a0"+
    "\0\u32dc\0\u3318\0\u3354\0\u3390\0\u33cc\0\u3408\0\u3444\0\u3480"+
    "\0\u34bc\0\u34f8\0\u2b5c\0\u3534\0\u3570\0\u35ac\0\u35e8\0\u3138"+
    "\0\u3624\0\u3660\0\u369c\0\u36d8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[260];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\6\1\7\1\6\1\10\1\11\1\12\1\13\1\6"+
    "\1\14\1\15\1\16\1\17\1\10\1\12\1\20\1\21"+
    "\1\22\2\13\1\23\2\22\1\13\1\24\1\6\1\25"+
    "\1\26\1\27\1\30\1\13\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\13"+
    "\1\44\2\13\1\45\1\13\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\12\1\56\1\57\1\60"+
    "\1\13\1\61\1\62\1\63\13\61\1\64\11\61\1\65"+
    "\43\61\1\66\1\62\1\63\25\66\1\67\1\64\42\66"+
    "\1\6\1\70\1\71\1\72\2\6\1\73\4\6\1\74"+
    "\1\75\4\6\3\73\2\6\1\73\3\6\26\73\13\6"+
    "\1\73\12\71\1\76\61\71\76\0\1\6\74\0\1\10"+
    "\10\0\1\10\63\0\1\77\1\100\7\0\1\55\73\0"+
    "\1\55\64\0\2\13\7\0\10\13\3\0\26\13\13\0"+
    "\1\13\10\0\1\55\74\0\1\101\1\102\4\0\2\103"+
    "\3\0\2\103\54\0\1\104\3\0\1\12\2\0\1\55"+
    "\3\0\3\104\2\0\1\104\3\0\26\104\13\0\1\104"+
    "\13\0\1\105\1\0\1\55\67\0\1\103\5\0\2\22"+
    "\1\106\1\0\1\107\2\22\1\107\16\0\1\110\10\0"+
    "\1\106\14\0\1\110\11\0\1\103\5\0\2\22\2\0"+
    "\1\107\2\22\1\107\16\0\1\110\25\0\1\110\6\0"+
    "\2\13\7\0\10\13\3\0\2\13\1\111\12\13\1\37"+
    "\6\13\1\112\1\13\13\0\1\13\15\0\1\55\11\0"+
    "\1\55\52\0\2\13\7\0\10\13\3\0\1\13\1\113"+
    "\24\13\13\0\1\13\6\0\2\13\7\0\4\13\1\114"+
    "\3\13\3\0\26\13\13\0\1\13\6\0\2\13\7\0"+
    "\10\13\3\0\5\13\1\115\20\13\13\0\1\13\6\0"+
    "\2\13\7\0\10\13\3\0\2\13\1\116\3\13\1\117"+
    "\6\13\1\120\10\13\13\0\1\13\6\0\2\13\7\0"+
    "\4\13\1\121\3\13\3\0\10\13\1\122\1\13\1\123"+
    "\3\13\1\124\7\13\13\0\1\13\6\0\2\13\7\0"+
    "\10\13\3\0\23\13\1\125\2\13\13\0\1\13\6\0"+
    "\2\13\7\0\4\13\1\126\3\13\3\0\2\13\1\127"+
    "\7\13\1\130\13\13\13\0\1\13\6\0\2\13\7\0"+
    "\10\13\3\0\1\13\1\131\15\13\1\132\1\13\1\133"+
    "\4\13\13\0\1\13\6\0\2\13\7\0\10\13\3\0"+
    "\5\13\1\115\1\13\1\134\4\13\1\135\5\13\1\136"+
    "\3\13\13\0\1\13\6\0\2\13\7\0\10\13\3\0"+
    "\5\13\1\137\20\13\13\0\1\13\6\0\2\13\7\0"+
    "\4\13\1\140\3\13\3\0\6\13\1\135\12\13\1\141"+
    "\4\13\13\0\1\13\6\0\2\13\7\0\10\13\3\0"+
    "\2\13\1\142\3\13\1\143\2\13\1\144\1\145\13\13"+
    "\13\0\1\13\6\0\2\13\7\0\10\13\3\0\2\13"+
    "\1\146\23\13\13\0\1\13\6\0\2\13\7\0\10\13"+
    "\3\0\11\13\1\147\5\13\1\150\6\13\13\0\1\13"+
    "\6\0\2\13\7\0\10\13\3\0\1\13\1\151\1\152"+
    "\7\13\1\153\13\13\13\0\1\13\6\0\2\13\7\0"+
    "\10\13\3\0\2\13\1\143\3\13\1\154\17\13\13\0"+
    "\1\13\6\0\2\13\7\0\4\13\1\121\3\13\3\0"+
    "\26\13\13\0\1\13\15\0\1\55\52\0\1\55\20\0"+
    "\1\55\53\0\1\55\17\0\1\55\54\0\1\55\1\0"+
    "\1\61\2\0\13\61\1\0\11\61\1\0\43\61\2\0"+
    "\1\63\71\0\2\155\1\0\14\155\1\156\4\155\1\156"+
    "\1\157\46\155\1\66\2\0\25\66\2\0\42\66\2\155"+
    "\1\0\71\155\2\0\1\71\74\0\1\72\10\0\1\72"+
    "\65\0\2\160\1\161\3\0\1\162\1\163\1\0\10\160"+
    "\3\0\26\160\13\0\1\160\3\0\1\72\2\0\1\160"+
    "\5\0\1\75\4\0\3\160\2\0\1\160\3\0\26\160"+
    "\13\0\1\160\4\0\1\164\1\0\1\165\12\0\3\165"+
    "\2\0\1\165\3\0\26\165\13\0\1\165\1\77\1\166"+
    "\1\167\71\77\5\170\1\171\66\170\11\0\1\55\70\0"+
    "\1\172\12\0\3\172\2\0\1\172\3\0\26\172\13\0"+
    "\1\172\17\0\2\103\2\0\1\107\2\103\1\107\16\0"+
    "\1\110\25\0\1\110\6\0\1\173\1\104\1\174\2\0"+
    "\1\175\1\176\2\0\2\104\3\173\2\104\1\173\3\0"+
    "\26\173\13\0\1\173\13\0\1\12\1\0\1\55\75\0"+
    "\1\177\1\200\1\0\5\200\3\0\1\200\1\0\1\200"+
    "\1\0\1\200\6\0\2\200\24\0\1\200\17\0\2\201"+
    "\3\0\2\201\1\0\1\202\42\0\1\202\7\0\2\13"+
    "\7\0\10\13\3\0\4\13\1\203\21\13\13\0\1\13"+
    "\6\0\2\13\7\0\10\13\3\0\10\13\1\204\15\13"+
    "\13\0\1\13\6\0\2\13\7\0\4\13\1\205\3\13"+
    "\3\0\26\13\13\0\1\13\6\0\2\13\7\0\10\13"+
    "\3\0\10\13\1\206\15\13\13\0\1\13\6\0\2\13"+
    "\7\0\10\13\3\0\5\13\1\137\2\13\1\111\15\13"+
    "\13\0\1\13\6\0\2\13\7\0\10\13\3\0\7\13"+
    "\1\207\16\13\13\0\1\13\6\0\2\13\7\0\10\13"+
    "\3\0\2\13\1\210\23\13\13\0\1\13\6\0\2\13"+
    "\7\0\10\13\3\0\10\13\1\135\15\13\13\0\1\13"+
    "\6\0\2\13\7\0\10\13\3\0\2\13\1\211\23\13"+
    "\13\0\1\13\6\0\2\13\7\0\10\13\3\0\20\13"+
    "\1\212\5\13\13\0\1\13\6\0\2\13\7\0\10\13"+
    "\3\0\11\13\1\213\14\13\13\0\1\13\6\0\2\13"+
    "\7\0\4\13\1\214\3\13\3\0\26\13\13\0\1\13"+
    "\6\0\2\13\7\0\10\13\3\0\16\13\1\115\7\13"+
    "\13\0\1\13\6\0\2\13\7\0\10\13\3\0\10\13"+
    "\1\215\11\13\1\216\3\13\13\0\1\13\6\0\2\13"+
    "\7\0\10\13\3\0\15\13\1\217\10\13\13\0\1\13"+
    "\6\0\2\13\7\0\10\13\3\0\12\13\1\137\6\13"+
    "\1\135\4\13\13\0\1\13\6\0\2\13\7\0\10\13"+
    "\3\0\1\13\1\220\7\13\1\221\14\13\13\0\1\13"+
    "\6\0\2\13\7\0\10\13\3\0\20\13\1\222\5\13"+
    "\13\0\1\13\6\0\2\13\7\0\10\13\3\0\4\13"+
    "\1\223\1\224\2\13\1\225\15\13\13\0\1\13\6\0"+
    "\2\13\7\0\10\13\3\0\20\13\1\226\5\13\13\0"+
    "\1\13\6\0\2\13\7\0\4\13\1\135\3\13\3\0"+
    "\26\13\13\0\1\13\6\0\2\13\7\0\10\13\3\0"+
    "\14\13\1\227\1\230\10\13\13\0\1\13\6\0\2\13"+
    "\7\0\10\13\3\0\7\13\1\231\16\13\13\0\1\13"+
    "\6\0\2\13\7\0\10\13\3\0\15\13\1\37\10\13"+
    "\13\0\1\13\6\0\2\13\7\0\10\13\3\0\1\13"+
    "\1\135\24\13\13\0\1\13\6\0\2\13\7\0\10\13"+
    "\3\0\7\13\1\232\16\13\13\0\1\13\6\0\2\13"+
    "\7\0\10\13\3\0\7\13\1\233\16\13\13\0\1\13"+
    "\6\0\2\13\7\0\10\13\3\0\1\234\25\13\13\0"+
    "\1\13\6\0\2\13\7\0\10\13\3\0\10\13\1\203"+
    "\15\13\13\0\1\13\6\0\2\13\7\0\10\13\3\0"+
    "\11\13\1\235\14\13\13\0\1\13\6\0\2\13\7\0"+
    "\10\13\3\0\6\13\1\236\2\13\1\237\14\13\13\0"+
    "\1\13\6\0\2\13\7\0\10\13\3\0\4\13\1\240"+
    "\21\13\13\0\1\13\6\0\2\13\7\0\10\13\3\0"+
    "\1\241\25\13\13\0\1\13\6\0\2\13\7\0\10\13"+
    "\3\0\11\13\1\242\14\13\13\0\1\13\17\0\1\157"+
    "\4\0\2\157\65\0\1\71\4\0\2\71\54\0\1\243"+
    "\12\0\3\243\2\0\1\243\3\0\26\243\13\0\1\243"+
    "\14\0\1\162\1\163\72\0\1\163\1\0\1\244\63\0"+
    "\1\245\12\0\3\245\2\0\1\245\3\0\26\245\13\0"+
    "\1\245\6\0\1\246\1\165\1\247\2\0\1\71\1\250"+
    "\2\0\2\165\3\246\2\165\1\246\3\0\26\246\13\0"+
    "\1\246\2\0\1\167\71\0\5\170\1\251\66\170\4\0"+
    "\1\167\1\171\74\0\2\172\3\0\1\252\3\0\10\172"+
    "\3\0\26\172\13\0\1\172\6\0\2\173\1\253\2\0"+
    "\1\175\1\254\1\255\1\0\10\173\3\0\26\173\13\0"+
    "\1\173\6\0\1\256\12\0\3\256\2\0\1\256\3\0"+
    "\26\256\13\0\1\256\6\0\1\257\5\0\1\176\4\0"+
    "\3\257\2\0\1\257\3\0\26\257\13\0\1\257\17\0"+
    "\2\260\1\0\5\260\3\0\1\260\1\0\1\260\1\0"+
    "\1\260\6\0\2\260\24\0\1\260\17\0\2\201\3\0"+
    "\2\201\17\0\1\110\25\0\1\110\17\0\2\201\3\0"+
    "\2\201\54\0\2\13\7\0\10\13\3\0\17\13\1\135"+
    "\6\13\13\0\1\13\6\0\2\13\7\0\4\13\1\261"+
    "\3\13\3\0\26\13\13\0\1\13\6\0\2\13\7\0"+
    "\10\13\3\0\2\13\1\262\23\13\13\0\1\13\6\0"+
    "\2\13\7\0\10\13\3\0\12\13\1\263\13\13\13\0"+
    "\1\13\6\0\2\13\7\0\10\13\3\0\5\13\1\121"+
    "\2\13\1\264\15\13\13\0\1\13\6\0\2\13\7\0"+
    "\10\13\3\0\5\13\1\221\20\13\13\0\1\13\6\0"+
    "\2\13\7\0\10\13\3\0\10\13\1\265\15\13\13\0"+
    "\1\13\6\0\2\13\7\0\4\13\1\143\3\13\3\0"+
    "\26\13\13\0\1\13\6\0\2\13\7\0\10\13\3\0"+
    "\10\13\1\111\15\13\13\0\1\13\6\0\2\13\7\0"+
    "\10\13\3\0\1\13\1\266\24\13\13\0\1\13\6\0"+
    "\2\13\7\0\10\13\3\0\11\13\1\267\14\13\13\0"+
    "\1\13\6\0\2\13\7\0\4\13\1\270\3\13\3\0"+
    "\26\13\13\0\1\13\6\0\2\13\7\0\10\13\3\0"+
    "\15\13\1\135\10\13\13\0\1\13\6\0\2\13\7\0"+
    "\10\13\3\0\6\13\1\271\17\13\13\0\1\13\6\0"+
    "\2\13\7\0\10\13\3\0\5\13\1\135\20\13\13\0"+
    "\1\13\6\0\2\13\7\0\4\13\1\272\3\13\3\0"+
    "\26\13\13\0\1\13\6\0\2\13\7\0\10\13\3\0"+
    "\15\13\1\273\10\13\13\0\1\13\6\0\2\13\7\0"+
    "\10\13\3\0\10\13\1\274\15\13\13\0\1\13\6\0"+
    "\2\13\7\0\4\13\1\275\3\13\3\0\26\13\13\0"+
    "\1\13\6\0\2\13\7\0\10\13\3\0\6\13\1\276"+
    "\6\13\1\277\10\13\13\0\1\13\6\0\2\13\7\0"+
    "\10\13\3\0\2\13\1\300\23\13\13\0\1\13\6\0"+
    "\2\13\7\0\4\13\1\301\3\13\3\0\26\13\13\0"+
    "\1\13\6\0\2\13\7\0\10\13\3\0\2\13\1\302"+
    "\23\13\13\0\1\13\6\0\2\13\7\0\10\13\3\0"+
    "\2\13\1\303\23\13\13\0\1\13\6\0\2\13\7\0"+
    "\10\13\3\0\4\13\1\304\21\13\13\0\1\13\6\0"+
    "\2\13\7\0\4\13\1\217\3\13\3\0\26\13\13\0"+
    "\1\13\6\0\2\13\7\0\10\13\3\0\15\13\1\137"+
    "\10\13\13\0\1\13\6\0\2\13\7\0\10\13\3\0"+
    "\10\13\1\305\15\13\13\0\1\13\6\0\2\13\7\0"+
    "\10\13\3\0\23\13\1\306\2\13\13\0\1\13\6\0"+
    "\2\13\7\0\10\13\3\0\3\13\1\307\22\13\13\0"+
    "\1\13\6\0\2\13\7\0\10\13\3\0\15\13\1\265"+
    "\10\13\13\0\1\13\6\0\2\13\7\0\10\13\3\0"+
    "\13\13\1\115\12\13\13\0\1\13\6\0\2\243\4\0"+
    "\1\162\1\163\1\0\10\243\3\0\26\243\13\0\1\243"+
    "\1\244\2\0\13\244\1\310\55\244\6\0\2\245\1\311"+
    "\2\0\1\312\3\0\10\245\3\0\26\245\13\0\1\245"+
    "\6\0\2\246\1\313\2\0\1\71\1\314\1\315\1\0"+
    "\10\246\3\0\26\246\13\0\1\246\6\0\1\316\12\0"+
    "\3\316\2\0\1\316\3\0\26\316\13\0\1\316\6\0"+
    "\1\317\5\0\1\250\4\0\3\317\2\0\1\317\3\0"+
    "\26\317\13\0\1\317\4\170\1\167\1\251\66\170\6\0"+
    "\1\320\12\0\3\320\2\0\1\320\3\0\26\320\13\0"+
    "\1\320\6\0\1\257\5\0\1\254\1\255\3\0\3\257"+
    "\2\0\1\257\3\0\26\257\13\0\1\257\14\0\1\255"+
    "\1\0\1\321\63\0\1\322\1\256\3\0\1\175\1\176"+
    "\2\0\2\256\3\322\2\256\1\322\3\0\26\322\13\0"+
    "\1\322\6\0\2\257\1\323\3\0\1\324\1\255\1\0"+
    "\10\257\3\0\26\257\13\0\1\257\17\0\2\325\1\0"+
    "\5\325\3\0\1\325\1\0\1\325\1\0\1\325\6\0"+
    "\2\325\24\0\1\325\6\0\2\13\7\0\10\13\3\0"+
    "\7\13\1\326\16\13\13\0\1\13\6\0\2\13\7\0"+
    "\10\13\3\0\3\13\1\135\22\13\13\0\1\13\6\0"+
    "\2\13\7\0\10\13\3\0\1\13\1\327\24\13\13\0"+
    "\1\13\6\0\2\13\7\0\10\13\3\0\11\13\1\330"+
    "\14\13\13\0\1\13\6\0\2\13\7\0\10\13\3\0"+
    "\11\13\1\331\14\13\13\0\1\13\6\0\2\13\7\0"+
    "\10\13\3\0\1\13\1\332\24\13\13\0\1\13\6\0"+
    "\2\13\7\0\10\13\3\0\23\13\1\137\2\13\13\0"+
    "\1\13\6\0\2\13\7\0\10\13\3\0\5\13\1\333"+
    "\20\13\13\0\1\13\6\0\2\13\7\0\10\13\3\0"+
    "\16\13\1\135\7\13\13\0\1\13\6\0\2\13\7\0"+
    "\10\13\3\0\6\13\1\334\17\13\13\0\1\13\6\0"+
    "\2\13\7\0\10\13\3\0\12\13\1\335\13\13\13\0"+
    "\1\13\6\0\2\13\7\0\10\13\3\0\2\13\1\336"+
    "\23\13\13\0\1\13\6\0\2\13\7\0\10\13\3\0"+
    "\1\13\1\337\24\13\13\0\1\13\6\0\2\13\7\0"+
    "\10\13\3\0\1\13\1\121\24\13\13\0\1\13\6\0"+
    "\2\13\7\0\4\13\1\340\3\13\3\0\26\13\13\0"+
    "\1\13\6\0\2\13\7\0\10\13\3\0\12\13\1\341"+
    "\13\13\13\0\1\13\6\0\2\13\7\0\10\13\3\0"+
    "\10\13\1\342\15\13\13\0\1\13\6\0\2\13\7\0"+
    "\10\13\3\0\22\13\1\265\3\13\13\0\1\13\6\0"+
    "\2\13\7\0\10\13\3\0\15\13\1\343\10\13\13\0"+
    "\1\13\6\0\2\13\7\0\10\13\3\0\10\13\1\344"+
    "\15\13\13\0\1\13\6\0\2\13\7\0\4\13\1\345"+
    "\3\13\3\0\26\13\13\0\1\13\6\0\2\13\7\0"+
    "\10\13\3\0\2\13\1\346\23\13\13\0\1\13\6\0"+
    "\2\13\7\0\10\13\3\0\2\13\1\347\23\13\13\0"+
    "\1\13\1\244\2\0\11\244\1\310\1\244\1\310\55\244"+
    "\6\0\1\350\12\0\3\350\2\0\1\350\3\0\26\350"+
    "\13\0\1\350\6\0\1\351\12\0\3\351\2\0\1\351"+
    "\3\0\26\351\13\0\1\351\6\0\1\317\5\0\1\314"+
    "\1\315\3\0\3\317\2\0\1\317\3\0\26\317\13\0"+
    "\1\317\14\0\1\315\1\0\1\352\63\0\1\353\1\316"+
    "\3\0\1\71\1\250\2\0\2\316\3\353\2\316\1\353"+
    "\3\0\26\353\13\0\1\353\6\0\2\317\1\354\3\0"+
    "\1\355\1\315\1\0\10\317\3\0\26\317\13\0\1\317"+
    "\6\0\1\322\1\320\3\0\1\175\1\254\1\255\1\0"+
    "\2\320\3\322\2\320\1\322\3\0\26\322\13\0\1\322"+
    "\1\321\2\0\13\321\1\356\55\321\6\0\2\322\1\323"+
    "\2\0\1\175\1\254\1\255\1\0\10\322\3\0\26\322"+
    "\13\0\1\322\6\0\1\357\12\0\3\357\2\0\1\357"+
    "\3\0\26\357\13\0\1\357\14\0\1\324\1\255\75\0"+
    "\2\360\1\0\5\360\3\0\1\360\1\0\1\360\1\0"+
    "\1\360\6\0\2\360\24\0\1\360\6\0\2\13\7\0"+
    "\10\13\3\0\13\13\1\221\12\13\13\0\1\13\6\0"+
    "\2\13\7\0\10\13\3\0\7\13\1\135\16\13\13\0"+
    "\1\13\6\0\2\13\7\0\10\13\3\0\7\13\1\361"+
    "\16\13\13\0\1\13\6\0\2\13\7\0\10\13\3\0"+
    "\4\13\1\135\21\13\13\0\1\13\6\0\2\13\7\0"+
    "\10\13\3\0\11\13\1\335\14\13\13\0\1\13\6\0"+
    "\2\13\7\0\10\13\3\0\20\13\1\362\5\13\13\0"+
    "\1\13\6\0\2\13\7\0\10\13\3\0\14\13\1\115"+
    "\11\13\13\0\1\13\6\0\2\13\7\0\10\13\3\0"+
    "\13\13\1\137\12\13\13\0\1\13\6\0\2\13\7\0"+
    "\10\13\3\0\7\13\1\363\16\13\13\0\1\13\6\0"+
    "\2\13\7\0\10\13\3\0\7\13\1\364\4\13\1\362"+
    "\11\13\13\0\1\13\6\0\2\13\7\0\10\13\3\0"+
    "\22\13\1\365\3\13\13\0\1\13\6\0\2\13\7\0"+
    "\10\13\3\0\15\13\1\121\10\13\13\0\1\13\6\0"+
    "\2\13\7\0\4\13\1\115\3\13\3\0\26\13\13\0"+
    "\1\13\6\0\2\13\7\0\10\13\3\0\15\13\1\366"+
    "\10\13\13\0\1\13\6\0\2\13\7\0\10\13\3\0"+
    "\11\13\1\367\14\13\13\0\1\13\6\0\2\13\7\0"+
    "\10\13\3\0\4\13\1\370\21\13\13\0\1\13\6\0"+
    "\2\13\7\0\10\13\3\0\10\13\1\137\15\13\13\0"+
    "\1\13\6\0\2\13\7\0\10\13\3\0\25\13\1\137"+
    "\13\0\1\13\6\0\2\350\3\0\1\312\3\0\10\350"+
    "\3\0\26\350\13\0\1\350\6\0\1\353\1\351\3\0"+
    "\1\71\1\314\1\315\1\0\2\351\3\353\2\351\1\353"+
    "\3\0\26\353\13\0\1\353\1\352\2\0\13\352\1\371"+
    "\55\352\6\0\2\353\1\354\2\0\1\71\1\314\1\315"+
    "\1\0\10\353\3\0\26\353\13\0\1\353\6\0\1\372"+
    "\12\0\3\372\2\0\1\372\3\0\26\372\13\0\1\372"+
    "\14\0\1\355\1\315\56\0\1\321\2\0\10\321\1\373"+
    "\1\356\1\321\1\356\55\321\6\0\2\357\4\0\1\324"+
    "\1\255\1\0\10\357\3\0\26\357\13\0\1\357\17\0"+
    "\2\374\1\0\5\374\3\0\1\374\1\0\1\374\1\0"+
    "\1\374\6\0\2\374\24\0\1\374\6\0\2\13\7\0"+
    "\10\13\3\0\12\13\1\137\13\13\13\0\1\13\6\0"+
    "\2\13\7\0\10\13\3\0\2\13\1\375\23\13\13\0"+
    "\1\13\6\0\2\13\7\0\10\13\3\0\4\13\1\222"+
    "\21\13\13\0\1\13\6\0\2\13\7\0\10\13\3\0"+
    "\2\13\1\217\23\13\13\0\1\13\6\0\2\13\7\0"+
    "\4\13\1\376\3\13\3\0\26\13\13\0\1\13\6\0"+
    "\2\13\7\0\10\13\3\0\21\13\1\135\4\13\13\0"+
    "\1\13\6\0\2\13\7\0\10\13\3\0\6\13\1\327"+
    "\17\13\13\0\1\13\6\0\2\13\7\0\10\13\3\0"+
    "\10\13\1\377\15\13\13\0\1\13\1\352\2\0\10\352"+
    "\1\u0100\1\371\1\352\1\371\55\352\6\0\2\372\4\0"+
    "\1\355\1\315\1\0\10\372\3\0\26\372\13\0\1\372"+
    "\17\0\2\u0101\1\0\5\u0101\3\0\1\u0101\1\0\1\u0101"+
    "\1\0\1\u0101\6\0\2\u0101\24\0\1\u0101\6\0\2\13"+
    "\7\0\10\13\3\0\4\13\1\137\21\13\13\0\1\13"+
    "\6\0\2\13\7\0\10\13\3\0\7\13\1\u0102\16\13"+
    "\13\0\1\13\6\0\2\13\7\0\4\13\1\u0103\3\13"+
    "\3\0\26\13\13\0\1\13\17\0\2\u0104\1\0\5\u0104"+
    "\3\0\1\u0104\1\0\1\u0104\1\0\1\u0104\6\0\2\u0104"+
    "\24\0\1\u0104\6\0\2\13\7\0\10\13\3\0\10\13"+
    "\1\221\15\13\13\0\1\13\6\0\2\13\7\0\10\13"+
    "\3\0\13\13\1\135\12\13\13\0\1\13\17\0\2\110"+
    "\1\0\5\110\3\0\1\110\1\0\1\110\1\0\1\110"+
    "\6\0\2\110\24\0\1\110";

  private static int [] zzUnpackTrans() {
    int [] result = new int[14100];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\5\0\1\11\11\1\1\11\4\1\1\11\21\1\7\11"+
    "\5\1\2\11\4\1\1\11\2\1\1\11\3\1\3\0"+
    "\1\1\1\0\1\1\2\0\1\11\44\1\1\11\2\1"+
    "\6\0\1\1\1\11\5\0\1\11\1\0\3\1\1\0"+
    "\40\1\7\0\1\11\5\0\31\1\1\0\1\11\12\0"+
    "\23\1\10\0\11\1\2\0\12\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[260];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    /**
     * Create an empty lexer, yyrset will be called later to reset and assign
     * the reader
     */
    public ActionScriptLexer() {
        super();
    }

    @Override
    public int yychar() {
        return yychar;
    }

    private static final byte PARAN     = 1;
    private static final byte BRACKET   = 2;
    private static final byte CURLY     = 3;

    private static String xmlTagName="";



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ActionScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ActionScriptLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1776) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 8: 
          { return token(TokenType.OPERATOR, -PARAN);
          }
        case 22: break;
        case 18: 
          { return token(TokenType.KEYWORD);
          }
        case 23: break;
        case 5: 
          { return token(TokenType.NUMBER);
          }
        case 24: break;
        case 2: 
          { return token(TokenType.OPERATOR);
          }
        case 25: break;
        case 9: 
          { return token(TokenType.OPERATOR,  CURLY);
          }
        case 26: break;
        case 10: 
          { return token(TokenType.OPERATOR, -CURLY);
          }
        case 27: break;
        case 13: 
          { tokenLength += yylength();
          }
        case 28: break;
        case 14: 
          { yybegin(YYINITIAL);
          }
        case 29: break;
        case 16: 
          { yybegin(XML);  tokenLength += yylength();
          }
        case 30: break;
        case 6: 
          { yybegin(CHARLITERAL); 
                                    tokenStart = yychar; 
                                    tokenLength = 1;
          }
        case 31: break;
        case 21: 
          { tokenLength += yylength();
                                   String endtagname=yytext();
                                   endtagname=endtagname.substring(2,endtagname.length()-1);                                   
                                   if(endtagname.equals(xmlTagName)){
                                       yybegin(YYINITIAL);
                                       return token(TokenType.STRING, tokenStart, tokenLength);
                                   }
          }
        case 32: break;
        case 15: 
          { yybegin(YYINITIAL); 
                                     // length also includes the trailing quote
                                     return token(TokenType.STRING, tokenStart, tokenLength + 1);
          }
        case 33: break;
        case 12: 
          { return token(TokenType.OPERATOR, -BRACKET);
          }
        case 34: break;
        case 20: 
          { yybegin(XML); 
                                    tokenStart = yychar;
                                    tokenLength = yylength(); 
                                    String s=yytext();                                    
                                    s=s.substring(1,s.length()-1);
                                    if(s.contains(" ")){
                                       s=s.substring(0,s.indexOf(" "));
                                    }
                                    xmlTagName = s;
          }
        case 35: break;
        case 7: 
          { return token(TokenType.OPERATOR,  PARAN);
          }
        case 36: break;
        case 3: 
          { return token(TokenType.IDENTIFIER);
          }
        case 37: break;
        case 19: 
          { tokenLength += 2;
          }
        case 38: break;
        case 11: 
          { return token(TokenType.OPERATOR,  BRACKET);
          }
        case 39: break;
        case 17: 
          { return token(TokenType.COMMENT);
          }
        case 40: break;
        case 4: 
          { yybegin(STRING); 
                                    tokenStart = yychar; 
                                    tokenLength = 1;
          }
        case 41: break;
        case 1: 
          { 
          }
        case 42: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return null;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
