/* The following code was generated by JFlex 1.4.3 on 22.7.10 20:11 */

/*
 * Copyright 2008 Ayman Al-Sairafi ayman.alsairafi@gmail.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License
 *       at http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package jsyntaxpane.lexers;


import jsyntaxpane.Token;
import jsyntaxpane.TokenType;
 

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 22.7.10 20:11 from the specification file
 * <tt>D:/Dokumenty/Programovani/JavaSE/JPSWFDec/libsrc/jsyntaxpane/jsyntaxpane/src/main/jflex/jsyntaxpane/lexers/actionscript.flex</tt>
 */
public final class ActionScriptLexer extends DefaultJFlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int CHARLITERAL = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\3\1\66"+
    "\1\21\1\0\1\6\1\66\1\67\1\22\1\54\1\55\1\5\1\71"+
    "\1\62\1\20\1\16\1\4\1\10\3\14\4\15\2\11\1\62\1\62"+
    "\1\65\1\63\1\64\1\62\1\0\3\13\1\72\1\17\1\13\7\6"+
    "\1\53\11\6\1\12\2\6\1\60\1\23\1\61\1\66\1\6\1\0"+
    "\1\24\1\25\1\31\1\42\1\34\1\44\1\51\1\37\1\40\1\6"+
    "\1\36\1\33\1\46\1\35\1\32\1\47\1\6\1\30\1\26\1\27"+
    "\1\41\1\52\1\50\1\43\1\45\1\6\1\56\1\70\1\57\1\62"+
    "\41\7\2\0\4\6\4\0\1\6\2\0\1\7\7\0\1\6\4\0"+
    "\1\6\5\0\27\6\1\0\37\6\1\0\u013f\6\31\0\162\6\4\0"+
    "\14\6\16\0\5\6\11\0\1\6\21\0\130\7\5\0\23\7\12\0"+
    "\1\6\13\0\1\6\1\0\3\6\1\0\1\6\1\0\24\6\1\0"+
    "\54\6\1\0\46\6\1\0\5\6\4\0\202\6\1\0\4\7\3\0"+
    "\105\6\1\0\46\6\2\0\2\6\6\0\20\6\41\0\46\6\2\0"+
    "\1\6\7\0\47\6\11\0\21\7\1\0\27\7\1\0\3\7\1\0"+
    "\1\7\1\0\2\7\1\0\1\7\13\0\33\6\5\0\3\6\15\0"+
    "\4\7\14\0\6\7\13\0\32\6\5\0\13\6\16\7\7\0\12\7"+
    "\4\0\2\6\1\7\143\6\1\0\1\6\10\7\1\0\6\7\2\6"+
    "\2\7\1\0\4\7\2\6\12\7\3\6\2\0\1\6\17\0\1\7"+
    "\1\6\1\7\36\6\33\7\2\0\3\6\60\0\46\6\13\7\1\6"+
    "\u014f\0\3\7\66\6\2\0\1\7\1\6\20\7\2\0\1\6\4\7"+
    "\3\0\12\6\2\7\2\0\12\7\21\0\3\7\1\0\10\6\2\0"+
    "\2\6\2\0\26\6\1\0\7\6\1\0\1\6\3\0\4\6\2\0"+
    "\1\7\1\6\7\7\2\0\2\7\2\0\3\7\11\0\1\7\4\0"+
    "\2\6\1\0\3\6\2\7\2\0\12\7\4\6\15\0\3\7\1\0"+
    "\6\6\4\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0"+
    "\2\6\1\0\2\6\2\0\1\7\1\0\5\7\4\0\2\7\2\0"+
    "\3\7\13\0\4\6\1\0\1\6\7\0\14\7\3\6\14\0\3\7"+
    "\1\0\11\6\1\0\3\6\1\0\26\6\1\0\7\6\1\0\2\6"+
    "\1\0\5\6\2\0\1\7\1\6\10\7\1\0\3\7\1\0\3\7"+
    "\2\0\1\6\17\0\2\6\2\7\2\0\12\7\1\0\1\6\17\0"+
    "\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6\1\0"+
    "\2\6\1\0\5\6\2\0\1\7\1\6\6\7\3\0\2\7\2\0"+
    "\3\7\10\0\2\7\4\0\2\6\1\0\3\6\4\0\12\7\1\0"+
    "\1\6\20\0\1\7\1\6\1\0\6\6\3\0\3\6\1\0\4\6"+
    "\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0\3\6"+
    "\3\0\10\6\1\0\3\6\4\0\5\7\3\0\3\7\1\0\4\7"+
    "\11\0\1\7\17\0\11\7\11\0\1\6\7\0\3\7\1\0\10\6"+
    "\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6\4\0\7\7"+
    "\1\0\3\7\1\0\4\7\7\0\2\7\11\0\2\6\4\0\12\7"+
    "\22\0\2\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6"+
    "\1\0\5\6\2\0\1\7\1\6\7\7\1\0\3\7\1\0\4\7"+
    "\7\0\2\7\7\0\1\6\1\0\2\6\4\0\12\7\22\0\2\7"+
    "\1\0\10\6\1\0\3\6\1\0\27\6\1\0\20\6\4\0\6\7"+
    "\2\0\3\7\1\0\4\7\11\0\1\7\10\0\2\6\4\0\12\7"+
    "\22\0\2\7\1\0\22\6\3\0\30\6\1\0\11\6\1\0\1\6"+
    "\2\0\7\6\3\0\1\7\4\0\6\7\1\0\1\7\1\0\10\7"+
    "\22\0\2\7\15\0\60\6\1\7\2\6\7\7\4\0\10\6\10\7"+
    "\1\0\12\7\47\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6"+
    "\2\0\1\6\6\0\4\6\1\0\7\6\1\0\3\6\1\0\1\6"+
    "\1\0\1\6\2\0\2\6\1\0\4\6\1\7\2\6\6\7\1\0"+
    "\2\7\1\6\2\0\5\6\1\0\1\6\1\0\6\7\2\0\12\7"+
    "\2\0\2\6\42\0\1\6\27\0\2\7\6\0\12\7\13\0\1\7"+
    "\1\0\1\7\1\0\1\7\4\0\2\7\10\6\1\0\42\6\6\0"+
    "\24\7\1\0\2\7\4\6\4\0\10\7\1\0\44\7\11\0\1\7"+
    "\71\0\42\6\1\0\5\6\1\0\2\6\1\0\7\7\3\0\4\7"+
    "\6\0\12\7\6\0\6\6\4\7\106\0\46\6\12\0\51\6\7\0"+
    "\132\6\5\0\104\6\5\0\122\6\6\0\7\6\1\0\77\6\1\0"+
    "\1\6\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0"+
    "\47\6\1\0\1\6\1\0\4\6\2\0\37\6\1\0\1\6\1\0"+
    "\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\7\6\1\0"+
    "\7\6\1\0\27\6\1\0\37\6\1\0\1\6\1\0\4\6\2\0"+
    "\7\6\1\0\47\6\1\0\23\6\16\0\11\7\56\0\125\6\14\0"+
    "\u026c\6\2\0\10\6\12\0\32\6\5\0\113\6\3\0\3\6\17\0"+
    "\15\6\1\0\4\6\3\7\13\0\22\6\3\7\13\0\22\6\2\7"+
    "\14\0\15\6\1\0\3\6\1\0\2\7\14\0\64\6\40\7\3\0"+
    "\1\6\3\0\2\6\1\7\2\0\12\7\41\0\3\7\2\0\12\7"+
    "\6\0\130\6\10\0\51\6\1\7\126\0\35\6\3\0\14\7\4\0"+
    "\14\7\12\0\12\7\36\6\2\0\5\6\u038b\0\154\6\224\0\234\6"+
    "\4\0\132\6\6\0\26\6\2\0\6\6\2\0\46\6\2\0\6\6"+
    "\2\0\10\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\37\6"+
    "\2\0\65\6\1\0\7\6\1\0\1\6\3\0\3\6\1\0\7\6"+
    "\3\0\4\6\2\0\6\6\4\0\15\6\5\0\3\6\1\0\7\6"+
    "\17\0\4\7\32\0\5\7\20\0\2\6\23\0\1\6\13\0\4\7"+
    "\6\0\6\7\1\0\1\6\15\0\1\6\40\0\22\6\36\0\15\7"+
    "\4\0\1\7\3\0\6\7\27\0\1\6\4\0\1\6\2\0\12\6"+
    "\1\0\1\6\3\0\5\6\6\0\1\6\1\0\1\6\1\0\1\6"+
    "\1\0\4\6\1\0\3\6\1\0\7\6\3\0\3\6\5\0\5\6"+
    "\26\0\44\6\u0e81\0\3\6\31\0\11\6\6\7\1\0\5\6\2\0"+
    "\5\6\4\0\126\6\2\0\2\7\2\0\3\6\1\0\137\6\5\0"+
    "\50\6\4\0\136\6\21\0\30\6\70\0\20\6\u0200\0\u19b6\6\112\0"+
    "\u51a6\6\132\0\u048d\6\u0773\0\u2ba4\6\u215c\0\u012e\6\2\0\73\6\225\0"+
    "\7\6\14\0\5\6\5\0\1\6\1\7\12\6\1\0\15\6\1\0"+
    "\5\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0\154\6\41\0"+
    "\u016b\6\22\0\100\6\2\0\66\6\50\0\15\6\3\0\20\7\20\0"+
    "\4\7\17\0\2\6\30\0\3\6\31\0\1\6\6\0\5\6\1\0"+
    "\207\6\2\0\1\7\4\0\1\6\13\0\12\7\7\0\32\6\4\0"+
    "\1\6\1\0\32\6\12\0\132\6\3\0\6\6\2\0\6\6\2\0"+
    "\6\6\2\0\3\6\3\0\2\6\3\0\2\6\22\0\3\7\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\3\1\2\2\1\3\2\4\2\2\1\5\1\6"+
    "\20\3\1\7\1\10\1\11\1\12\1\13\1\14\6\2"+
    "\1\15\2\16\1\17\1\1\1\15\1\1\1\20\2\0"+
    "\1\4\1\0\1\4\24\3\1\21\16\3\1\2\1\22"+
    "\2\15\2\20\2\0\3\4\1\0\35\3\1\15\1\0"+
    "\1\4\25\3\1\4\3\3\1\21\10\3\1\21\4\3"+
    "\1\4\11\3\1\4\4\3\1\4\2\3\1\4\1\3";

  private static int [] zzUnpackAction() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\261\0\261\0\u02ff"+
    "\0\u033a\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7"+
    "\0\u0512\0\u054d\0\u0588\0\u05c3\0\u05fe\0\u0639\0\u0674\0\261"+
    "\0\261\0\261\0\261\0\261\0\261\0\261\0\u06af\0\u06ea"+
    "\0\u0725\0\u0760\0\u079b\0\u07d6\0\u0811\0\261\0\261\0\u084c"+
    "\0\u0887\0\u08c2\0\u08fd\0\u0938\0\u0973\0\u09ae\0\u09e9\0\261"+
    "\0\u0a24\0\u0a5f\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86\0\u0bc1"+
    "\0\u0bfc\0\u0c37\0\u0c72\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99"+
    "\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u01d8\0\u0ec0\0\u0efb\0\u0f36"+
    "\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u10d3\0\u110e"+
    "\0\u1149\0\u1184\0\u11bf\0\u11fa\0\261\0\u1235\0\u1270\0\u12ab"+
    "\0\261\0\u12e6\0\u1321\0\u0973\0\u135c\0\u1397\0\u13d2\0\u140d"+
    "\0\u1448\0\u1483\0\u14be\0\u14f9\0\u1534\0\u156f\0\u15aa\0\u15e5"+
    "\0\u1620\0\u165b\0\u1696\0\u16d1\0\u170c\0\u1747\0\u1782\0\u17bd"+
    "\0\u17f8\0\u1833\0\u186e\0\u18a9\0\u18e4\0\u191f\0\u195a\0\u1995"+
    "\0\u19d0\0\u1a0b\0\u1a46\0\u1a81\0\261\0\u1abc\0\u1af7\0\u1b32"+
    "\0\u1b6d\0\u1ba8\0\u1be3\0\u1c1e\0\u1c59\0\u1c94\0\u1ccf\0\u1d0a"+
    "\0\u1d45\0\u1d80\0\u1dbb\0\u1df6\0\u1e31\0\u1e6c\0\u1ea7\0\u1ee2"+
    "\0\u1f1d\0\u1f58\0\u1f93\0\u1fce\0\u2009\0\u2044\0\u207f\0\u20ba"+
    "\0\u15e5\0\u20f5\0\u2130\0\u216b\0\u21a6\0\u21e1\0\u221c\0\u2257"+
    "\0\u2292\0\u22cd\0\u2308\0\u2343\0\u237e\0\u23b9\0\u23f4\0\u242f"+
    "\0\u246a\0\u24a5\0\u24e0\0\u251b\0\u2556\0\u2591\0\u25cc\0\u2607"+
    "\0\u2642\0\u267d\0\u26b8\0\u26f3\0\u272e\0\u2769\0\u27a4\0\u27df"+
    "\0\u281a\0\u2855";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\4\1\6\1\7\1\10\1\11\1\4"+
    "\1\12\1\13\2\11\2\13\1\14\1\11\1\15\1\16"+
    "\1\17\1\4\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\11\1\27\1\30\2\11\1\31\1\11\1\32"+
    "\1\11\1\33\2\11\1\34\1\35\1\11\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\10"+
    "\1\47\1\50\1\10\1\51\1\52\1\53\1\11\1\54"+
    "\1\55\1\56\16\54\1\57\1\54\1\60\47\54\1\61"+
    "\1\55\1\56\17\61\1\57\1\62\47\61\75\0\1\4"+
    "\73\0\1\6\73\0\1\63\1\64\55\0\1\46\72\0"+
    "\1\46\15\0\10\11\1\0\1\11\4\0\30\11\16\0"+
    "\1\11\10\0\2\13\1\65\1\0\2\13\1\66\1\67"+
    "\14\0\1\67\5\0\1\70\1\65\26\0\1\70\10\0"+
    "\2\13\2\0\2\13\1\66\1\67\14\0\1\67\5\0"+
    "\1\70\27\0\1\70\10\0\2\66\2\0\2\66\75\0"+
    "\1\46\42\0\1\46\15\0\10\11\1\0\1\11\4\0"+
    "\1\11\1\71\26\11\16\0\1\11\6\0\10\11\1\0"+
    "\1\11\4\0\4\11\1\72\1\11\1\73\21\11\16\0"+
    "\1\11\6\0\10\11\1\0\1\11\4\0\3\11\1\74"+
    "\11\11\1\75\6\11\1\76\3\11\16\0\1\11\6\0"+
    "\10\11\1\0\1\11\4\0\4\11\1\77\6\11\1\100"+
    "\14\11\16\0\1\11\6\0\10\11\1\0\1\11\4\0"+
    "\10\11\1\101\17\11\16\0\1\11\6\0\10\11\1\0"+
    "\1\11\4\0\1\102\5\11\1\103\1\104\3\11\1\105"+
    "\14\11\16\0\1\11\6\0\10\11\1\0\1\11\4\0"+
    "\26\11\1\106\1\11\16\0\1\11\6\0\10\11\1\0"+
    "\1\11\4\0\1\107\6\11\1\110\7\11\1\111\10\11"+
    "\16\0\1\11\6\0\10\11\1\0\1\11\4\0\10\11"+
    "\1\112\4\11\1\113\12\11\16\0\1\11\6\0\10\11"+
    "\1\0\1\11\4\0\11\11\1\114\6\11\1\115\1\11"+
    "\1\116\5\11\16\0\1\11\6\0\10\11\1\0\1\11"+
    "\4\0\6\11\1\115\1\11\1\117\10\11\1\120\6\11"+
    "\16\0\1\11\6\0\10\11\1\0\1\11\4\0\1\121"+
    "\5\11\1\122\5\11\1\123\1\124\12\11\16\0\1\11"+
    "\6\0\10\11\1\0\1\11\4\0\1\125\3\11\1\126"+
    "\10\11\1\127\12\11\16\0\1\11\6\0\10\11\1\0"+
    "\1\11\4\0\13\11\1\130\1\131\13\11\16\0\1\11"+
    "\6\0\10\11\1\0\1\11\4\0\1\122\5\11\1\132"+
    "\21\11\16\0\1\11\6\0\10\11\1\0\1\11\4\0"+
    "\1\133\27\11\16\0\1\11\63\0\1\46\1\134\71\0"+
    "\1\46\1\0\1\10\70\0\1\46\3\0\1\46\66\0"+
    "\1\46\4\0\1\46\65\0\1\46\5\0\1\46\1\0"+
    "\1\54\2\0\16\54\1\0\1\54\1\0\47\54\2\0"+
    "\1\56\70\0\2\135\1\0\5\135\1\136\3\135\1\136"+
    "\1\137\55\135\1\61\2\0\17\61\2\0\47\61\2\135"+
    "\1\0\70\135\1\63\1\140\1\141\70\63\5\142\1\143"+
    "\65\142\10\0\1\144\1\145\1\0\3\145\1\0\1\145"+
    "\4\0\2\145\3\0\1\145\2\0\1\145\5\0\1\145"+
    "\1\0\1\145\25\0\1\145\10\0\2\66\2\0\2\66"+
    "\1\0\1\67\14\0\1\67\5\0\1\70\27\0\1\70"+
    "\10\0\2\146\2\0\2\146\2\0\1\147\50\0\1\147"+
    "\7\0\10\11\1\0\1\11\4\0\2\11\1\150\25\11"+
    "\16\0\1\11\6\0\10\11\1\0\1\11\4\0\10\11"+
    "\1\151\17\11\16\0\1\11\6\0\10\11\1\0\1\11"+
    "\4\0\6\11\1\152\21\11\16\0\1\11\6\0\10\11"+
    "\1\0\1\11\4\0\1\153\27\11\16\0\1\11\6\0"+
    "\10\11\1\0\1\11\4\0\23\11\1\154\4\11\16\0"+
    "\1\11\6\0\10\11\1\0\1\11\4\0\14\11\1\155"+
    "\13\11\16\0\1\11\6\0\10\11\1\0\1\11\4\0"+
    "\15\11\1\156\3\11\1\115\6\11\16\0\1\11\6\0"+
    "\10\11\1\0\1\11\4\0\4\11\1\157\7\11\1\160"+
    "\13\11\16\0\1\11\6\0\10\11\1\0\1\11\4\0"+
    "\3\11\1\161\24\11\16\0\1\11\6\0\10\11\1\0"+
    "\1\11\4\0\2\11\1\156\1\107\24\11\16\0\1\11"+
    "\6\0\10\11\1\0\1\11\4\0\11\11\1\162\16\11"+
    "\16\0\1\11\6\0\10\11\1\0\1\11\4\0\1\163"+
    "\27\11\16\0\1\11\6\0\10\11\1\0\1\11\4\0"+
    "\1\122\27\11\16\0\1\11\6\0\10\11\1\0\1\11"+
    "\4\0\10\11\1\164\17\11\16\0\1\11\6\0\10\11"+
    "\1\0\1\11\4\0\5\11\1\165\22\11\16\0\1\11"+
    "\6\0\10\11\1\0\1\11\4\0\2\11\1\156\25\11"+
    "\16\0\1\11\6\0\10\11\1\0\1\11\4\0\3\11"+
    "\1\166\24\11\16\0\1\11\6\0\10\11\1\0\1\11"+
    "\4\0\24\11\1\115\3\11\16\0\1\11\6\0\10\11"+
    "\1\0\1\11\4\0\7\11\1\167\20\11\16\0\1\11"+
    "\6\0\10\11\1\0\1\11\4\0\2\11\1\170\1\171"+
    "\24\11\16\0\1\11\6\0\10\11\1\0\1\11\4\0"+
    "\23\11\1\172\4\11\16\0\1\11\6\0\10\11\1\0"+
    "\1\11\4\0\20\11\1\173\7\11\16\0\1\11\6\0"+
    "\10\11\1\0\1\11\4\0\11\11\1\174\16\11\16\0"+
    "\1\11\6\0\10\11\1\0\1\11\4\0\7\11\1\110"+
    "\20\11\16\0\1\11\6\0\10\11\1\0\1\11\4\0"+
    "\4\11\1\115\23\11\16\0\1\11\6\0\10\11\1\0"+
    "\1\11\4\0\11\11\1\175\16\11\16\0\1\11\6\0"+
    "\10\11\1\0\1\11\4\0\11\11\1\176\16\11\16\0"+
    "\1\11\6\0\10\11\1\0\1\11\4\0\5\11\1\177"+
    "\22\11\16\0\1\11\6\0\10\11\1\0\1\11\4\0"+
    "\6\11\1\200\5\11\1\201\13\11\16\0\1\11\6\0"+
    "\10\11\1\0\1\11\4\0\1\11\1\202\26\11\16\0"+
    "\1\11\6\0\10\11\1\0\1\11\4\0\14\11\1\203"+
    "\13\11\16\0\1\11\6\0\10\11\1\0\1\11\4\0"+
    "\3\11\1\165\24\11\16\0\1\11\6\0\10\11\1\0"+
    "\1\11\4\0\14\11\1\204\13\11\16\0\1\11\6\0"+
    "\10\11\1\0\1\11\4\0\27\11\1\115\16\0\1\11"+
    "\63\0\1\46\1\10\16\0\1\137\3\0\2\137\65\0"+
    "\1\205\3\0\2\205\57\0\1\141\70\0\5\142\1\206"+
    "\65\142\4\0\1\141\1\143\75\0\2\207\1\0\3\207"+
    "\1\0\1\207\4\0\2\207\3\0\1\207\2\0\1\207"+
    "\5\0\1\207\1\0\1\207\25\0\1\207\10\0\2\146"+
    "\2\0\2\146\24\0\1\70\27\0\1\70\10\0\2\146"+
    "\2\0\2\146\63\0\10\11\1\0\1\11\4\0\3\11"+
    "\1\210\24\11\16\0\1\11\6\0\10\11\1\0\1\11"+
    "\4\0\1\211\27\11\16\0\1\11\6\0\10\11\1\0"+
    "\1\11\4\0\7\11\1\212\20\11\16\0\1\11\6\0"+
    "\10\11\1\0\1\11\4\0\3\11\1\213\24\11\16\0"+
    "\1\11\6\0\10\11\1\0\1\11\4\0\10\11\1\122"+
    "\17\11\16\0\1\11\6\0\10\11\1\0\1\11\4\0"+
    "\3\11\1\107\24\11\16\0\1\11\6\0\10\11\1\0"+
    "\1\11\4\0\10\11\1\115\17\11\16\0\1\11\6\0"+
    "\10\11\1\0\1\11\4\0\6\11\1\214\21\11\16\0"+
    "\1\11\6\0\10\11\1\0\1\11\4\0\2\11\1\115"+
    "\25\11\16\0\1\11\6\0\10\11\1\0\1\11\4\0"+
    "\15\11\1\215\12\11\16\0\1\11\6\0\10\11\1\0"+
    "\1\11\4\0\2\11\1\216\1\217\24\11\16\0\1\11"+
    "\6\0\10\11\1\0\1\11\4\0\2\11\1\160\25\11"+
    "\16\0\1\11\6\0\10\11\1\0\1\11\4\0\4\11"+
    "\1\220\23\11\16\0\1\11\6\0\10\11\1\0\1\11"+
    "\4\0\13\11\1\115\14\11\16\0\1\11\6\0\10\11"+
    "\1\0\1\11\4\0\10\11\1\221\17\11\16\0\1\11"+
    "\6\0\10\11\1\0\1\11\4\0\7\11\1\115\20\11"+
    "\16\0\1\11\6\0\10\11\1\0\1\11\4\0\3\11"+
    "\1\222\24\11\16\0\1\11\6\0\10\11\1\0\1\11"+
    "\4\0\10\11\1\223\17\11\16\0\1\11\6\0\10\11"+
    "\1\0\1\11\4\0\6\11\1\224\1\225\20\11\16\0"+
    "\1\11\6\0\10\11\1\0\1\11\4\0\1\226\27\11"+
    "\16\0\1\11\6\0\10\11\1\0\1\11\4\0\1\227"+
    "\27\11\16\0\1\11\6\0\10\11\1\0\1\11\4\0"+
    "\1\230\27\11\16\0\1\11\6\0\10\11\1\0\1\11"+
    "\4\0\5\11\1\231\22\11\16\0\1\11\6\0\10\11"+
    "\1\0\1\11\4\0\12\11\1\232\15\11\16\0\1\11"+
    "\6\0\10\11\1\0\1\11\4\0\3\11\1\233\24\11"+
    "\16\0\1\11\6\0\10\11\1\0\1\11\4\0\26\11"+
    "\1\234\1\11\16\0\1\11\6\0\10\11\1\0\1\11"+
    "\4\0\7\11\1\213\20\11\16\0\1\11\6\0\10\11"+
    "\1\0\1\11\4\0\7\11\1\156\20\11\16\0\1\11"+
    "\6\0\10\11\1\0\1\11\4\0\16\11\1\115\11\11"+
    "\16\0\1\11\4\142\1\141\1\206\65\142\10\0\2\235"+
    "\1\0\3\235\1\0\1\235\4\0\2\235\3\0\1\235"+
    "\2\0\1\235\5\0\1\235\1\0\1\235\25\0\1\235"+
    "\6\0\10\11\1\0\1\11\4\0\4\11\1\236\23\11"+
    "\16\0\1\11\6\0\10\11\1\0\1\11\4\0\12\11"+
    "\1\115\15\11\16\0\1\11\6\0\10\11\1\0\1\11"+
    "\4\0\10\11\1\237\17\11\16\0\1\11\6\0\10\11"+
    "\1\0\1\11\4\0\14\11\1\240\13\11\16\0\1\11"+
    "\6\0\10\11\1\0\1\11\4\0\24\11\1\241\3\11"+
    "\16\0\1\11\6\0\10\11\1\0\1\11\4\0\4\11"+
    "\1\242\23\11\16\0\1\11\6\0\10\11\1\0\1\11"+
    "\4\0\3\11\1\115\24\11\16\0\1\11\6\0\10\11"+
    "\1\0\1\11\4\0\14\11\1\243\13\11\16\0\1\11"+
    "\6\0\10\11\1\0\1\11\4\0\4\11\1\244\23\11"+
    "\16\0\1\11\6\0\10\11\1\0\1\11\4\0\11\11"+
    "\1\245\16\11\16\0\1\11\6\0\10\11\1\0\1\11"+
    "\4\0\1\246\27\11\16\0\1\11\6\0\10\11\1\0"+
    "\1\11\4\0\4\11\1\247\23\11\16\0\1\11\6\0"+
    "\10\11\1\0\1\11\4\0\4\11\1\216\23\11\16\0"+
    "\1\11\6\0\10\11\1\0\1\11\4\0\10\11\1\250"+
    "\17\11\16\0\1\11\6\0\10\11\1\0\1\11\4\0"+
    "\15\11\1\251\12\11\16\0\1\11\6\0\10\11\1\0"+
    "\1\11\4\0\22\11\1\213\5\11\16\0\1\11\6\0"+
    "\10\11\1\0\1\11\4\0\7\11\1\252\20\11\16\0"+
    "\1\11\6\0\10\11\1\0\1\11\4\0\3\11\1\253"+
    "\24\11\16\0\1\11\6\0\10\11\1\0\1\11\4\0"+
    "\1\254\27\11\16\0\1\11\6\0\10\11\1\0\1\11"+
    "\4\0\10\11\1\255\17\11\16\0\1\11\6\0\10\11"+
    "\1\0\1\11\4\0\1\256\27\11\16\0\1\11\10\0"+
    "\2\257\1\0\3\257\1\0\1\257\4\0\2\257\3\0"+
    "\1\257\2\0\1\257\5\0\1\257\1\0\1\257\25\0"+
    "\1\257\6\0\10\11\1\0\1\11\4\0\1\260\27\11"+
    "\16\0\1\11\6\0\10\11\1\0\1\11\4\0\1\242"+
    "\27\11\16\0\1\11\6\0\10\11\1\0\1\11\4\0"+
    "\5\11\1\115\22\11\16\0\1\11\6\0\10\11\1\0"+
    "\1\11\4\0\11\11\1\115\16\11\16\0\1\11\6\0"+
    "\10\11\1\0\1\11\4\0\11\11\1\261\16\11\16\0"+
    "\1\11\6\0\10\11\1\0\1\11\4\0\14\11\1\262"+
    "\13\11\16\0\1\11\6\0\10\11\1\0\1\11\4\0"+
    "\16\11\1\160\11\11\16\0\1\11\6\0\10\11\1\0"+
    "\1\11\4\0\11\11\1\263\16\11\16\0\1\11\6\0"+
    "\10\11\1\0\1\11\4\0\20\11\1\264\7\11\16\0"+
    "\1\11\6\0\10\11\1\0\1\11\4\0\22\11\1\265"+
    "\5\11\16\0\1\11\6\0\10\11\1\0\1\11\4\0"+
    "\7\11\1\216\20\11\16\0\1\11\6\0\10\11\1\0"+
    "\1\11\4\0\7\11\1\266\20\11\16\0\1\11\6\0"+
    "\10\11\1\0\1\11\4\0\14\11\1\267\13\11\16\0"+
    "\1\11\6\0\10\11\1\0\1\11\4\0\25\11\1\156"+
    "\2\11\16\0\1\11\6\0\10\11\1\0\1\11\4\0"+
    "\5\11\1\270\22\11\16\0\1\11\6\0\10\11\1\0"+
    "\1\11\4\0\3\11\1\156\24\11\16\0\1\11\10\0"+
    "\2\271\1\0\3\271\1\0\1\271\4\0\2\271\3\0"+
    "\1\271\2\0\1\271\5\0\1\271\1\0\1\271\25\0"+
    "\1\271\6\0\10\11\1\0\1\11\4\0\5\11\1\216"+
    "\22\11\16\0\1\11\6\0\10\11\1\0\1\11\4\0"+
    "\15\11\1\156\12\11\16\0\1\11\6\0\10\11\1\0"+
    "\1\11\4\0\16\11\1\156\11\11\16\0\1\11\6\0"+
    "\10\11\1\0\1\11\4\0\5\11\1\272\22\11\16\0"+
    "\1\11\6\0\10\11\1\0\1\11\4\0\1\273\27\11"+
    "\16\0\1\11\6\0\10\11\1\0\1\11\4\0\10\11"+
    "\1\274\17\11\16\0\1\11\6\0\10\11\1\0\1\11"+
    "\4\0\21\11\1\115\6\11\16\0\1\11\6\0\10\11"+
    "\1\0\1\11\4\0\6\11\1\242\21\11\16\0\1\11"+
    "\6\0\10\11\1\0\1\11\4\0\3\11\1\275\24\11"+
    "\16\0\1\11\10\0\2\276\1\0\3\276\1\0\1\276"+
    "\4\0\2\276\3\0\1\276\2\0\1\276\5\0\1\276"+
    "\1\0\1\276\25\0\1\276\6\0\10\11\1\0\1\11"+
    "\4\0\10\11\1\277\17\11\16\0\1\11\6\0\10\11"+
    "\1\0\1\11\4\0\5\11\1\156\22\11\16\0\1\11"+
    "\6\0\10\11\1\0\1\11\4\0\11\11\1\300\16\11"+
    "\16\0\1\11\6\0\10\11\1\0\1\11\4\0\10\11"+
    "\1\204\17\11\16\0\1\11\10\0\2\301\1\0\3\301"+
    "\1\0\1\301\4\0\2\301\3\0\1\301\2\0\1\301"+
    "\5\0\1\301\1\0\1\301\25\0\1\301\6\0\10\11"+
    "\1\0\1\11\4\0\6\11\1\302\21\11\16\0\1\11"+
    "\6\0\10\11\1\0\1\11\4\0\3\11\1\160\24\11"+
    "\16\0\1\11\10\0\2\70\1\0\3\70\1\0\1\70"+
    "\4\0\2\70\3\0\1\70\2\0\1\70\5\0\1\70"+
    "\1\0\1\70\25\0\1\70\6\0\10\11\1\0\1\11"+
    "\4\0\20\11\1\115\7\11\16\0\1\11";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10384];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\11\1\2\11\20\1\7\11\7\1\2\11"+
    "\4\1\2\0\1\1\1\0\1\11\44\1\1\11\3\1"+
    "\1\11\2\0\3\1\1\0\35\1\1\11\1\0\74\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[194];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    /**
     * Create an empty lexer, yyrset will be called later to reset and assign
     * the reader
     */
    public ActionScriptLexer() {
        super();
    }

    @Override
    public int yychar() {
        return yychar;
    }

    private static final byte PARAN     = 1;
    private static final byte BRACKET   = 2;
    private static final byte CURLY     = 3;



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ActionScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public ActionScriptLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1780) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 8: 
          { return token(TokenType.OPERATOR, -PARAN);
          }
        case 19: break;
        case 17: 
          { return token(TokenType.KEYWORD);
          }
        case 20: break;
        case 4: 
          { return token(TokenType.NUMBER);
          }
        case 21: break;
        case 2: 
          { return token(TokenType.OPERATOR);
          }
        case 22: break;
        case 9: 
          { return token(TokenType.OPERATOR,  CURLY);
          }
        case 23: break;
        case 10: 
          { return token(TokenType.OPERATOR, -CURLY);
          }
        case 24: break;
        case 13: 
          { tokenLength += yylength();
          }
        case 25: break;
        case 14: 
          { yybegin(YYINITIAL);
          }
        case 26: break;
        case 6: 
          { yybegin(CHARLITERAL); 
                                    tokenStart = yychar; 
                                    tokenLength = 1;
          }
        case 27: break;
        case 15: 
          { yybegin(YYINITIAL); 
                                     // length also includes the trailing quote
                                     return token(TokenType.STRING, tokenStart, tokenLength + 1);
          }
        case 28: break;
        case 12: 
          { return token(TokenType.OPERATOR, -BRACKET);
          }
        case 29: break;
        case 7: 
          { return token(TokenType.OPERATOR,  PARAN);
          }
        case 30: break;
        case 3: 
          { return token(TokenType.IDENTIFIER);
          }
        case 31: break;
        case 18: 
          { tokenLength += 2;
          }
        case 32: break;
        case 11: 
          { return token(TokenType.OPERATOR,  BRACKET);
          }
        case 33: break;
        case 16: 
          { return token(TokenType.COMMENT);
          }
        case 34: break;
        case 5: 
          { yybegin(STRING); 
                                    tokenStart = yychar; 
                                    tokenLength = 1;
          }
        case 35: break;
        case 1: 
          { 
          }
        case 36: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return null;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
