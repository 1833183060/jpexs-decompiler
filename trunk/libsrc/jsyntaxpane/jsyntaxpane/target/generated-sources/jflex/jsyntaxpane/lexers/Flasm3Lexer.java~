/* The following code was generated by JFlex 1.4.3 on 1.3.13 22:20 */

/* Flash assembler language lexer specification */

package jsyntaxpane.lexers;


import jsyntaxpane.Token;
import jsyntaxpane.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 1.3.13 22:20 from the specification file
 * <tt>D:/Dokumenty/Programovani/JavaSE/FFDec/trunk/libsrc/jsyntaxpane/jsyntaxpane/src/main/jflex/jsyntaxpane/lexers/flasm3.flex</tt>
 */
public final class Flasm3Lexer extends DefaultJFlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int PARAMETERS = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\11\1\3\1\2\1\0\1\3\1\1\16\11\4\0\1\41\1\0"+
    "\1\43\1\0\1\10\6\0\1\22\1\0\1\16\1\17\1\0\1\15"+
    "\3\44\4\23\2\6\1\14\1\24\5\0\4\10\1\20\25\10\1\5"+
    "\1\25\1\7\1\0\1\13\1\0\1\36\1\12\1\27\1\40\1\21"+
    "\1\12\1\42\1\12\1\32\3\12\1\4\1\34\1\33\1\30\1\12"+
    "\1\37\1\35\1\31\3\12\1\26\2\12\4\0\41\11\2\0\4\10"+
    "\4\0\1\10\2\0\1\11\7\0\1\10\4\0\1\10\5\0\27\10"+
    "\1\0\37\10\1\0\u013f\10\31\0\162\10\4\0\14\10\16\0\5\10"+
    "\11\0\1\10\21\0\130\11\5\0\23\11\12\0\1\10\13\0\1\10"+
    "\1\0\3\10\1\0\1\10\1\0\24\10\1\0\54\10\1\0\46\10"+
    "\1\0\5\10\4\0\202\10\1\0\4\11\3\0\105\10\1\0\46\10"+
    "\2\0\2\10\6\0\20\10\41\0\46\10\2\0\1\10\7\0\47\10"+
    "\11\0\21\11\1\0\27\11\1\0\3\11\1\0\1\11\1\0\2\11"+
    "\1\0\1\11\13\0\33\10\5\0\3\10\15\0\4\11\14\0\6\11"+
    "\13\0\32\10\5\0\13\10\16\11\7\0\12\11\4\0\2\10\1\11"+
    "\143\10\1\0\1\10\10\11\1\0\6\11\2\10\2\11\1\0\4\11"+
    "\2\10\12\11\3\10\2\0\1\10\17\0\1\11\1\10\1\11\36\10"+
    "\33\11\2\0\3\10\60\0\46\10\13\11\1\10\u014f\0\3\11\66\10"+
    "\2\0\1\11\1\10\20\11\2\0\1\10\4\11\3\0\12\10\2\11"+
    "\2\0\12\11\21\0\3\11\1\0\10\10\2\0\2\10\2\0\26\10"+
    "\1\0\7\10\1\0\1\10\3\0\4\10\2\0\1\11\1\10\7\11"+
    "\2\0\2\11\2\0\3\11\11\0\1\11\4\0\2\10\1\0\3\10"+
    "\2\11\2\0\12\11\4\10\15\0\3\11\1\0\6\10\4\0\2\10"+
    "\2\0\26\10\1\0\7\10\1\0\2\10\1\0\2\10\1\0\2\10"+
    "\2\0\1\11\1\0\5\11\4\0\2\11\2\0\3\11\13\0\4\10"+
    "\1\0\1\10\7\0\14\11\3\10\14\0\3\11\1\0\11\10\1\0"+
    "\3\10\1\0\26\10\1\0\7\10\1\0\2\10\1\0\5\10\2\0"+
    "\1\11\1\10\10\11\1\0\3\11\1\0\3\11\2\0\1\10\17\0"+
    "\2\10\2\11\2\0\12\11\1\0\1\10\17\0\3\11\1\0\10\10"+
    "\2\0\2\10\2\0\26\10\1\0\7\10\1\0\2\10\1\0\5\10"+
    "\2\0\1\11\1\10\6\11\3\0\2\11\2\0\3\11\10\0\2\11"+
    "\4\0\2\10\1\0\3\10\4\0\12\11\1\0\1\10\20\0\1\11"+
    "\1\10\1\0\6\10\3\0\3\10\1\0\4\10\3\0\2\10\1\0"+
    "\1\10\1\0\2\10\3\0\2\10\3\0\3\10\3\0\10\10\1\0"+
    "\3\10\4\0\5\11\3\0\3\11\1\0\4\11\11\0\1\11\17\0"+
    "\11\11\11\0\1\10\7\0\3\11\1\0\10\10\1\0\3\10\1\0"+
    "\27\10\1\0\12\10\1\0\5\10\4\0\7\11\1\0\3\11\1\0"+
    "\4\11\7\0\2\11\11\0\2\10\4\0\12\11\22\0\2\11\1\0"+
    "\10\10\1\0\3\10\1\0\27\10\1\0\12\10\1\0\5\10\2\0"+
    "\1\11\1\10\7\11\1\0\3\11\1\0\4\11\7\0\2\11\7\0"+
    "\1\10\1\0\2\10\4\0\12\11\22\0\2\11\1\0\10\10\1\0"+
    "\3\10\1\0\27\10\1\0\20\10\4\0\6\11\2\0\3\11\1\0"+
    "\4\11\11\0\1\11\10\0\2\10\4\0\12\11\22\0\2\11\1\0"+
    "\22\10\3\0\30\10\1\0\11\10\1\0\1\10\2\0\7\10\3\0"+
    "\1\11\4\0\6\11\1\0\1\11\1\0\10\11\22\0\2\11\15\0"+
    "\60\10\1\11\2\10\7\11\4\0\10\10\10\11\1\0\12\11\47\0"+
    "\2\10\1\0\1\10\2\0\2\10\1\0\1\10\2\0\1\10\6\0"+
    "\4\10\1\0\7\10\1\0\3\10\1\0\1\10\1\0\1\10\2\0"+
    "\2\10\1\0\4\10\1\11\2\10\6\11\1\0\2\11\1\10\2\0"+
    "\5\10\1\0\1\10\1\0\6\11\2\0\12\11\2\0\2\10\42\0"+
    "\1\10\27\0\2\11\6\0\12\11\13\0\1\11\1\0\1\11\1\0"+
    "\1\11\4\0\2\11\10\10\1\0\42\10\6\0\24\11\1\0\2\11"+
    "\4\10\4\0\10\11\1\0\44\11\11\0\1\11\71\0\42\10\1\0"+
    "\5\10\1\0\2\10\1\0\7\11\3\0\4\11\6\0\12\11\6\0"+
    "\6\10\4\11\106\0\46\10\12\0\51\10\7\0\132\10\5\0\104\10"+
    "\5\0\122\10\6\0\7\10\1\0\77\10\1\0\1\10\1\0\4\10"+
    "\2\0\7\10\1\0\1\10\1\0\4\10\2\0\47\10\1\0\1\10"+
    "\1\0\4\10\2\0\37\10\1\0\1\10\1\0\4\10\2\0\7\10"+
    "\1\0\1\10\1\0\4\10\2\0\7\10\1\0\7\10\1\0\27\10"+
    "\1\0\37\10\1\0\1\10\1\0\4\10\2\0\7\10\1\0\47\10"+
    "\1\0\23\10\16\0\11\11\56\0\125\10\14\0\u026c\10\2\0\10\10"+
    "\12\0\32\10\5\0\113\10\3\0\3\10\17\0\15\10\1\0\4\10"+
    "\3\11\13\0\22\10\3\11\13\0\22\10\2\11\14\0\15\10\1\0"+
    "\3\10\1\0\2\11\14\0\64\10\40\11\3\0\1\10\3\0\2\10"+
    "\1\11\2\0\12\11\41\0\3\11\2\0\12\11\6\0\130\10\10\0"+
    "\51\10\1\11\126\0\35\10\3\0\14\11\4\0\14\11\12\0\12\11"+
    "\36\10\2\0\5\10\u038b\0\154\10\224\0\234\10\4\0\132\10\6\0"+
    "\26\10\2\0\6\10\2\0\46\10\2\0\6\10\2\0\10\10\1\0"+
    "\1\10\1\0\1\10\1\0\1\10\1\0\37\10\2\0\65\10\1\0"+
    "\7\10\1\0\1\10\3\0\3\10\1\0\7\10\3\0\4\10\2\0"+
    "\6\10\4\0\15\10\5\0\3\10\1\0\7\10\17\0\4\11\32\0"+
    "\5\11\20\0\2\10\23\0\1\10\13\0\4\11\6\0\6\11\1\0"+
    "\1\10\15\0\1\10\40\0\22\10\36\0\15\11\4\0\1\11\3\0"+
    "\6\11\27\0\1\10\4\0\1\10\2\0\12\10\1\0\1\10\3\0"+
    "\5\10\6\0\1\10\1\0\1\10\1\0\1\10\1\0\4\10\1\0"+
    "\3\10\1\0\7\10\3\0\3\10\5\0\5\10\26\0\44\10\u0e81\0"+
    "\3\10\31\0\11\10\6\11\1\0\5\10\2\0\5\10\4\0\126\10"+
    "\2\0\2\11\2\0\3\10\1\0\137\10\5\0\50\10\4\0\136\10"+
    "\21\0\30\10\70\0\20\10\u0200\0\u19b6\10\112\0\u51a6\10\132\0\u048d\10"+
    "\u0773\0\u2ba4\10\u215c\0\u012e\10\2\0\73\10\225\0\7\10\14\0\5\10"+
    "\5\0\1\10\1\11\12\10\1\0\15\10\1\0\5\10\1\0\1\10"+
    "\1\0\2\10\1\0\2\10\1\0\154\10\41\0\u016b\10\22\0\100\10"+
    "\2\0\66\10\50\0\15\10\3\0\20\11\20\0\4\11\17\0\2\10"+
    "\30\0\3\10\31\0\1\10\6\0\5\10\1\0\207\10\2\0\1\11"+
    "\4\0\1\10\13\0\12\11\7\0\32\10\4\0\1\10\1\0\32\10"+
    "\12\0\132\10\3\0\6\10\2\0\6\10\2\0\6\10\2\0\3\10"+
    "\3\0\2\10\3\0\2\10\22\0\3\11\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\2\1\1\2\1\1\1\2\1\3\2\4\1\1"+
    "\1\5\2\6\1\7\1\10\1\7\2\1\1\11\1\12"+
    "\1\0\1\13\1\2\1\14\2\3\1\0\1\10\2\0"+
    "\2\11\1\2\1\3\1\0\1\10\1\0\1\2\1\0"+
    "\1\2\1\15\15\2\1\0\2\2\2\0\2\2\1\16"+
    "\2\2";

  private static int [] zzUnpackAction() {
    int [] result = new int[66];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\45\0\112\0\157\0\224\0\271\0\336\0\u0103"+
    "\0\u0128\0\u014d\0\157\0\u0172\0\157\0\u0197\0\157\0\u01bc"+
    "\0\u01e1\0\u0206\0\u022b\0\u0250\0\u0275\0\157\0\336\0\157"+
    "\0\u029a\0\157\0\u02bf\0\u02e4\0\u0309\0\u032e\0\u0353\0\u0250"+
    "\0\u0378\0\157\0\u039d\0\157\0\u03c2\0\u03e7\0\u03e7\0\u040c"+
    "\0\u0431\0\u0456\0\157\0\u047b\0\u04a0\0\u04c5\0\u04ea\0\u050f"+
    "\0\u0534\0\u0559\0\u057e\0\u05a3\0\u05c8\0\u05ed\0\u0612\0\u0637"+
    "\0\u065c\0\u0681\0\u06a6\0\u06cb\0\u06f0\0\u0715\0\u073a\0\157"+
    "\0\u075f\0\u0784";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[66];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\4\1\5\1\6\3\4\1\7\1\4\1\6\1\7"+
    "\4\4\1\7\1\10\4\4\13\6\1\5\1\6\2\4"+
    "\1\11\1\12\1\13\22\11\1\14\15\11\1\15\1\11"+
    "\1\4\1\16\1\17\1\4\1\20\1\4\1\21\1\4"+
    "\1\22\1\4\2\22\1\4\1\21\1\23\1\24\2\22"+
    "\1\4\1\21\1\25\1\4\13\22\1\4\1\22\1\26"+
    "\1\21\50\0\1\5\35\0\1\5\7\0\1\6\1\0"+
    "\1\6\1\0\2\27\2\6\1\30\1\6\2\0\1\27"+
    "\1\6\1\0\1\6\2\0\13\6\1\0\1\6\1\0"+
    "\1\6\4\0\1\27\1\0\1\27\1\0\4\27\1\30"+
    "\1\27\2\0\2\27\1\0\1\27\2\0\13\27\1\0"+
    "\1\27\1\0\1\27\4\0\1\6\1\0\1\6\1\0"+
    "\2\27\2\6\1\30\1\6\2\0\1\27\1\6\1\0"+
    "\1\6\2\0\1\31\12\6\1\0\1\6\1\0\1\6"+
    "\1\11\2\0\22\11\1\0\15\11\1\0\1\11\2\0"+
    "\1\13\42\0\2\32\1\0\12\32\1\33\5\32\1\34"+
    "\20\32\1\33\2\0\1\17\46\0\1\22\1\35\1\22"+
    "\1\0\4\22\1\0\1\22\2\0\2\22\1\0\1\22"+
    "\2\0\13\22\1\0\1\22\1\0\1\22\6\0\1\21"+
    "\6\0\1\21\1\0\1\36\2\37\1\0\1\21\20\0"+
    "\1\21\4\0\1\22\1\0\1\22\1\0\4\22\1\0"+
    "\1\22\2\0\2\22\1\0\1\22\2\0\13\22\1\0"+
    "\1\22\1\0\1\22\6\0\1\21\6\0\1\21\1\0"+
    "\1\40\3\0\1\21\20\0\1\21\6\0\1\36\6\0"+
    "\1\36\5\0\1\36\20\0\1\36\1\25\1\41\1\42"+
    "\42\25\4\0\1\6\1\0\1\6\1\0\2\27\2\6"+
    "\1\30\1\6\2\0\1\27\1\6\1\0\1\6\2\0"+
    "\1\6\1\43\11\6\1\0\1\6\1\0\1\6\15\0"+
    "\1\34\5\0\1\34\20\0\1\34\15\0\1\44\5\0"+
    "\1\44\20\0\1\44\6\0\1\45\6\0\1\45\5\0"+
    "\1\45\20\0\1\45\6\0\1\36\6\0\1\36\2\0"+
    "\2\37\1\0\1\36\20\0\1\36\6\0\1\46\6\0"+
    "\1\46\1\47\3\0\1\47\1\46\20\0\1\46\2\0"+
    "\1\42\46\0\1\6\1\0\1\6\1\0\2\27\2\6"+
    "\1\30\1\6\2\0\1\27\1\50\1\0\1\6\2\0"+
    "\13\6\1\0\1\6\1\0\1\6\6\0\1\45\1\51"+
    "\5\0\1\45\5\0\1\45\20\0\1\45\6\0\1\46"+
    "\6\0\1\46\5\0\1\46\20\0\1\46\4\0\1\6"+
    "\1\0\1\6\1\0\2\27\2\6\1\30\1\6\2\0"+
    "\1\27\1\6\1\0\1\6\2\0\2\6\1\52\10\6"+
    "\1\0\1\6\1\0\1\6\43\0\1\53\5\0\1\6"+
    "\1\0\1\6\1\0\2\27\2\6\1\30\1\6\2\0"+
    "\1\27\1\6\1\0\1\6\2\0\3\6\1\54\7\6"+
    "\1\0\1\6\1\0\1\6\4\0\1\6\1\0\1\6"+
    "\1\0\2\27\2\6\1\30\1\6\2\0\1\27\1\6"+
    "\1\0\1\6\2\0\4\6\1\55\6\6\1\0\1\6"+
    "\1\0\1\6\4\0\1\6\1\0\1\6\1\0\2\27"+
    "\2\6\1\30\1\6\2\0\1\27\1\6\1\0\1\6"+
    "\2\0\5\6\1\56\5\6\1\0\1\6\1\0\1\6"+
    "\4\0\1\6\1\0\1\6\1\0\2\27\2\6\1\30"+
    "\1\6\2\0\1\27\1\6\1\0\1\6\2\0\6\6"+
    "\1\57\4\6\1\0\1\6\1\0\1\6\4\0\1\6"+
    "\1\0\1\6\1\0\2\27\2\6\1\30\1\6\2\0"+
    "\1\27\1\60\1\0\1\6\2\0\3\6\1\61\3\6"+
    "\1\62\3\6\1\0\1\6\1\0\1\6\4\0\1\6"+
    "\1\0\1\6\1\0\2\27\2\6\1\30\1\6\2\0"+
    "\1\27\1\6\1\0\1\6\2\0\6\6\1\63\4\6"+
    "\1\0\1\6\1\0\1\6\4\0\1\6\1\0\1\6"+
    "\1\0\2\27\2\6\1\30\1\6\2\0\1\27\1\6"+
    "\1\0\1\6\2\0\10\6\1\64\2\6\1\0\1\6"+
    "\1\0\1\6\4\0\1\6\1\0\1\6\1\0\2\27"+
    "\2\6\1\30\1\6\2\0\1\27\1\6\1\0\1\6"+
    "\2\0\3\6\1\65\7\6\1\0\1\6\1\0\1\6"+
    "\4\0\1\6\1\0\1\6\1\0\2\27\2\6\1\30"+
    "\1\6\2\0\1\27\1\6\1\0\1\6\2\0\12\6"+
    "\1\66\1\0\1\6\1\0\1\6\4\0\1\6\1\0"+
    "\1\6\1\0\2\27\2\6\1\30\1\6\2\0\1\27"+
    "\1\6\1\0\1\6\2\0\11\6\1\67\1\6\1\0"+
    "\1\6\1\0\1\6\4\0\1\6\1\0\1\6\1\0"+
    "\2\27\2\6\1\30\1\6\2\0\1\27\1\6\1\0"+
    "\1\6\2\0\10\6\1\70\2\6\1\0\1\6\1\0"+
    "\1\6\4\0\1\6\1\0\1\6\1\0\2\27\2\6"+
    "\1\30\1\6\2\0\1\27\1\6\1\0\1\6\2\0"+
    "\13\6\1\71\1\6\1\0\1\6\4\0\1\6\1\0"+
    "\1\6\1\0\2\27\2\6\1\30\1\6\2\0\1\27"+
    "\1\6\1\0\1\6\2\0\13\6\1\0\1\72\1\0"+
    "\1\6\4\0\1\6\1\0\1\6\1\0\2\27\2\6"+
    "\1\30\1\6\2\0\1\27\1\6\1\0\1\6\2\0"+
    "\11\6\1\73\1\6\1\0\1\6\1\0\1\6\6\0"+
    "\1\74\6\0\1\75\5\0\1\74\20\0\1\74\4\0"+
    "\1\6\1\0\1\6\1\0\2\27\2\6\1\30\1\6"+
    "\2\0\1\27\1\76\1\0\1\6\2\0\13\6\1\0"+
    "\1\6\1\0\1\6\4\0\1\6\1\0\1\6\1\0"+
    "\2\27\2\6\1\30\1\6\2\0\1\27\1\6\1\0"+
    "\1\6\2\0\3\6\1\77\7\6\1\0\1\6\1\0"+
    "\1\6\6\0\1\74\5\0\1\100\1\74\5\0\1\74"+
    "\20\0\1\74\14\0\1\100\34\0\1\6\1\0\1\6"+
    "\1\0\2\27\2\6\1\30\1\6\2\0\1\27\1\6"+
    "\1\0\1\6\2\0\3\6\1\66\7\6\1\0\1\6"+
    "\1\0\1\6\4\0\1\6\1\0\1\101\1\0\2\27"+
    "\2\6\1\30\1\102\2\0\1\27\1\6\1\0\1\101"+
    "\2\0\13\6\1\0\1\6\1\0\1\101\4\0\1\6"+
    "\1\0\1\101\1\0\2\27\2\6\1\100\1\101\2\0"+
    "\1\27\1\6\1\0\1\101\2\0\13\6\1\0\1\6"+
    "\1\0\1\101\4\0\1\6\1\0\1\6\1\0\2\27"+
    "\2\6\1\100\1\6\2\0\1\27\1\6\1\0\1\6"+
    "\2\0\13\6\1\0\1\6\1\0\1\6";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1961];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\6\1\1\11\1\1\1\11\1\1\1\11"+
    "\6\1\1\11\1\0\1\11\1\1\1\11\2\1\1\0"+
    "\1\1\2\0\1\1\1\11\1\1\1\11\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\11\15\1\1\0\2\1"+
    "\2\0\2\1\1\11\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[66];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

  StringBuffer string = new StringBuffer();
  boolean isMultiname=false;


    /**
     * Create an empty lexer, yyrset will be called later to reset and assign
     * the reader
     */
    public Flasm3Lexer() {
        super();
    }

    @Override
    public int yychar() {
        return yychar;
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Flasm3Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Flasm3Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1734) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { yybegin(PARAMETERS);
                                     // length also includes the trailing quote
                                     if(isMultiname){
                                        return token(TokenType.IDENTIFIER, tokenStart, tokenLength + 1);//multiname
                                     }else{
                                        return token(TokenType.STRING, tokenStart, tokenLength + 1);
                                     }
          }
        case 15: break;
        case 9: 
          { yybegin(YYINITIAL); return token(TokenType.COMMENT);
          }
        case 16: break;
        case 4: 
          { yybegin(YYINITIAL);
                                   return token(TokenType.ERROR,tokenStart, tokenLength);
          }
        case 17: break;
        case 14: 
          { return token(TokenType.KEYWORD);
          }
        case 18: break;
        case 11: 
          { return token(TokenType.IDENTIFIER,yychar,yylength()-1);
          }
        case 19: break;
        case 10: 
          { yybegin(STRING);
                                    tokenStart = yychar;
                                    tokenLength = 1;
                                    isMultiname=false;
          }
        case 20: break;
        case 13: 
          { isMultiname=true;
                                    yybegin(STRING);
                                    tokenStart = yychar;
                                    tokenLength = yylength();
          }
        case 21: break;
        case 12: 
          { tokenLength += 2;
          }
        case 22: break;
        case 7: 
          { return token(TokenType.IDENTIFIER);
          }
        case 23: break;
        case 2: 
          { yybegin(PARAMETERS);
                                        return token(TokenType.KEYWORD);
          }
        case 24: break;
        case 8: 
          { return token(TokenType.NUMBER);
          }
        case 25: break;
        case 6: 
          { yybegin(YYINITIAL);
          }
        case 26: break;
        case 1: 
          { 
          }
        case 27: break;
        case 3: 
          { tokenLength += yylength();
          }
        case 28: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return null;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
