/* The following code was generated by JFlex 1.4.3 on 10.8.10 18:04 */

/* Flash assembler language lexer specification */

package jsyntaxpane.lexers;


import jsyntaxpane.Token;
import jsyntaxpane.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10.8.10 18:04 from the specification file
 * <tt>D:/Dokumenty/Programovani/JavaSE/ASDec/trunk/libsrc/jsyntaxpane/jsyntaxpane/src/main/jflex/jsyntaxpane/lexers/flasm.flex</tt>
 */
public final class FlasmLexer extends DefaultJFlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int PARAMETERS = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2, 2
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\6\1\4\1\2\1\0\1\4\1\1\16\6\4\0\1\4\1\0"+
    "\1\37\1\0\1\5\6\0\1\31\1\0\1\31\1\27\1\0\1\26"+
    "\3\40\4\32\2\11\1\12\1\3\5\0\4\7\1\30\25\7\1\0"+
    "\1\33\2\0\1\10\1\0\1\20\1\7\1\35\1\24\1\16\1\17"+
    "\1\34\1\7\1\25\2\7\1\21\1\7\1\23\1\36\2\7\1\14"+
    "\1\22\1\13\1\15\5\7\1\0\1\0\1\0\1\0\41\6\2\0"+
    "\4\5\4\0\1\5\2\0\1\6\7\0\1\5\4\0\1\5\5\0"+
    "\27\5\1\0\37\5\1\0\u013f\5\31\0\162\5\4\0\14\5\16\0"+
    "\5\5\11\0\1\5\21\0\130\6\5\0\23\6\12\0\1\5\13\0"+
    "\1\5\1\0\3\5\1\0\1\5\1\0\24\5\1\0\54\5\1\0"+
    "\46\5\1\0\5\5\4\0\202\5\1\0\4\6\3\0\105\5\1\0"+
    "\46\5\2\0\2\5\6\0\20\5\41\0\46\5\2\0\1\5\7\0"+
    "\47\5\11\0\21\6\1\0\27\6\1\0\3\6\1\0\1\6\1\0"+
    "\2\6\1\0\1\6\13\0\33\5\5\0\3\5\15\0\4\6\14\0"+
    "\6\6\13\0\32\5\5\0\13\5\16\6\7\0\12\6\4\0\2\5"+
    "\1\6\143\5\1\0\1\5\10\6\1\0\6\6\2\5\2\6\1\0"+
    "\4\6\2\5\12\6\3\5\2\0\1\5\17\0\1\6\1\5\1\6"+
    "\36\5\33\6\2\0\3\5\60\0\46\5\13\6\1\5\u014f\0\3\6"+
    "\66\5\2\0\1\6\1\5\20\6\2\0\1\5\4\6\3\0\12\5"+
    "\2\6\2\0\12\6\21\0\3\6\1\0\10\5\2\0\2\5\2\0"+
    "\26\5\1\0\7\5\1\0\1\5\3\0\4\5\2\0\1\6\1\5"+
    "\7\6\2\0\2\6\2\0\3\6\11\0\1\6\4\0\2\5\1\0"+
    "\3\5\2\6\2\0\12\6\4\5\15\0\3\6\1\0\6\5\4\0"+
    "\2\5\2\0\26\5\1\0\7\5\1\0\2\5\1\0\2\5\1\0"+
    "\2\5\2\0\1\6\1\0\5\6\4\0\2\6\2\0\3\6\13\0"+
    "\4\5\1\0\1\5\7\0\14\6\3\5\14\0\3\6\1\0\11\5"+
    "\1\0\3\5\1\0\26\5\1\0\7\5\1\0\2\5\1\0\5\5"+
    "\2\0\1\6\1\5\10\6\1\0\3\6\1\0\3\6\2\0\1\5"+
    "\17\0\2\5\2\6\2\0\12\6\1\0\1\5\17\0\3\6\1\0"+
    "\10\5\2\0\2\5\2\0\26\5\1\0\7\5\1\0\2\5\1\0"+
    "\5\5\2\0\1\6\1\5\6\6\3\0\2\6\2\0\3\6\10\0"+
    "\2\6\4\0\2\5\1\0\3\5\4\0\12\6\1\0\1\5\20\0"+
    "\1\6\1\5\1\0\6\5\3\0\3\5\1\0\4\5\3\0\2\5"+
    "\1\0\1\5\1\0\2\5\3\0\2\5\3\0\3\5\3\0\10\5"+
    "\1\0\3\5\4\0\5\6\3\0\3\6\1\0\4\6\11\0\1\6"+
    "\17\0\11\6\11\0\1\5\7\0\3\6\1\0\10\5\1\0\3\5"+
    "\1\0\27\5\1\0\12\5\1\0\5\5\4\0\7\6\1\0\3\6"+
    "\1\0\4\6\7\0\2\6\11\0\2\5\4\0\12\6\22\0\2\6"+
    "\1\0\10\5\1\0\3\5\1\0\27\5\1\0\12\5\1\0\5\5"+
    "\2\0\1\6\1\5\7\6\1\0\3\6\1\0\4\6\7\0\2\6"+
    "\7\0\1\5\1\0\2\5\4\0\12\6\22\0\2\6\1\0\10\5"+
    "\1\0\3\5\1\0\27\5\1\0\20\5\4\0\6\6\2\0\3\6"+
    "\1\0\4\6\11\0\1\6\10\0\2\5\4\0\12\6\22\0\2\6"+
    "\1\0\22\5\3\0\30\5\1\0\11\5\1\0\1\5\2\0\7\5"+
    "\3\0\1\6\4\0\6\6\1\0\1\6\1\0\10\6\22\0\2\6"+
    "\15\0\60\5\1\6\2\5\7\6\4\0\10\5\10\6\1\0\12\6"+
    "\47\0\2\5\1\0\1\5\2\0\2\5\1\0\1\5\2\0\1\5"+
    "\6\0\4\5\1\0\7\5\1\0\3\5\1\0\1\5\1\0\1\5"+
    "\2\0\2\5\1\0\4\5\1\6\2\5\6\6\1\0\2\6\1\5"+
    "\2\0\5\5\1\0\1\5\1\0\6\6\2\0\12\6\2\0\2\5"+
    "\42\0\1\5\27\0\2\6\6\0\12\6\13\0\1\6\1\0\1\6"+
    "\1\0\1\6\4\0\2\6\10\5\1\0\42\5\6\0\24\6\1\0"+
    "\2\6\4\5\4\0\10\6\1\0\44\6\11\0\1\6\71\0\42\5"+
    "\1\0\5\5\1\0\2\5\1\0\7\6\3\0\4\6\6\0\12\6"+
    "\6\0\6\5\4\6\106\0\46\5\12\0\51\5\7\0\132\5\5\0"+
    "\104\5\5\0\122\5\6\0\7\5\1\0\77\5\1\0\1\5\1\0"+
    "\4\5\2\0\7\5\1\0\1\5\1\0\4\5\2\0\47\5\1\0"+
    "\1\5\1\0\4\5\2\0\37\5\1\0\1\5\1\0\4\5\2\0"+
    "\7\5\1\0\1\5\1\0\4\5\2\0\7\5\1\0\7\5\1\0"+
    "\27\5\1\0\37\5\1\0\1\5\1\0\4\5\2\0\7\5\1\0"+
    "\47\5\1\0\23\5\16\0\11\6\56\0\125\5\14\0\u026c\5\2\0"+
    "\10\5\12\0\32\5\5\0\113\5\3\0\3\5\17\0\15\5\1\0"+
    "\4\5\3\6\13\0\22\5\3\6\13\0\22\5\2\6\14\0\15\5"+
    "\1\0\3\5\1\0\2\6\14\0\64\5\40\6\3\0\1\5\3\0"+
    "\2\5\1\6\2\0\12\6\41\0\3\6\2\0\12\6\6\0\130\5"+
    "\10\0\51\5\1\6\126\0\35\5\3\0\14\6\4\0\14\6\12\0"+
    "\12\6\36\5\2\0\5\5\u038b\0\154\5\224\0\234\5\4\0\132\5"+
    "\6\0\26\5\2\0\6\5\2\0\46\5\2\0\6\5\2\0\10\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\37\5\2\0\65\5"+
    "\1\0\7\5\1\0\1\5\3\0\3\5\1\0\7\5\3\0\4\5"+
    "\2\0\6\5\4\0\15\5\5\0\3\5\1\0\7\5\17\0\4\6"+
    "\32\0\5\6\20\0\2\5\23\0\1\5\13\0\4\6\6\0\6\6"+
    "\1\0\1\5\15\0\1\5\40\0\22\5\36\0\15\6\4\0\1\6"+
    "\3\0\6\6\27\0\1\5\4\0\1\5\2\0\12\5\1\0\1\5"+
    "\3\0\5\5\6\0\1\5\1\0\1\5\1\0\1\5\1\0\4\5"+
    "\1\0\3\5\1\0\7\5\3\0\3\5\5\0\5\5\26\0\44\5"+
    "\u0e81\0\3\5\31\0\11\5\6\6\1\0\5\5\2\0\5\5\4\0"+
    "\126\5\2\0\2\6\2\0\3\5\1\0\137\5\5\0\50\5\4\0"+
    "\136\5\21\0\30\5\70\0\20\5\u0200\0\u19b6\5\112\0\u51a6\5\132\0"+
    "\u048d\5\u0773\0\u2ba4\5\u215c\0\u012e\5\2\0\73\5\225\0\7\5\14\0"+
    "\5\5\5\0\1\5\1\6\12\5\1\0\15\5\1\0\5\5\1\0"+
    "\1\5\1\0\2\5\1\0\2\5\1\0\154\5\41\0\u016b\5\22\0"+
    "\100\5\2\0\66\5\50\0\15\5\3\0\20\6\20\0\4\6\17\0"+
    "\2\5\30\0\3\5\31\0\1\5\6\0\5\5\1\0\207\5\2\0"+
    "\1\6\4\0\1\5\13\0\12\6\7\0\32\5\4\0\1\5\1\0"+
    "\32\5\12\0\132\5\3\0\6\5\2\0\6\5\2\0\6\5\2\0"+
    "\3\5\3\0\2\5\3\0\2\5\22\0\3\6\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\3\1\1\2\1\3\2\4\1\1\1\5\2\6"+
    "\1\7\1\10\1\11\5\10\1\1\1\10\1\12\1\0"+
    "\1\13\1\14\2\3\1\0\1\11\6\10\1\3\1\11"+
    "\1\0\6\10\1\15\16\10\2\16";

  private static int [] zzUnpackAction() {
    int [] result = new int[64];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\41\0\102\0\143\0\204\0\245\0\306\0\347"+
    "\0\u0108\0\143\0\u0129\0\143\0\u014a\0\143\0\u016b\0\u018c"+
    "\0\u01ad\0\u01ce\0\u01ef\0\u0210\0\u0231\0\u0252\0\u0273\0\u0294"+
    "\0\143\0\245\0\143\0\143\0\u02b5\0\u02d6\0\u02f7\0\u0318"+
    "\0\u0339\0\u035a\0\u037b\0\u039c\0\u03bd\0\u03de\0\143\0\u03ff"+
    "\0\u03ff\0\u0420\0\u0441\0\u0462\0\u0483\0\u04a4\0\u04c5\0\u018c"+
    "\0\u04e6\0\u0507\0\u0528\0\u0549\0\u056a\0\u058b\0\u05ac\0\u05cd"+
    "\0\u05ee\0\u060f\0\u0630\0\u0651\0\u0672\0\u0693\0\u06b4\0\u018c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[64];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\4\4\1\5\1\6\1\4\1\7\1\6\2\4\13\7"+
    "\2\4\1\7\3\4\3\7\2\4\1\10\1\11\1\12"+
    "\30\10\1\13\3\10\1\14\1\10\1\4\1\15\1\16"+
    "\1\17\1\4\1\20\1\4\2\20\1\21\1\4\1\22"+
    "\1\23\1\24\1\20\1\25\3\20\1\26\2\20\1\21"+
    "\1\27\1\20\1\4\1\21\1\4\1\20\1\30\1\20"+
    "\1\31\1\21\45\0\1\5\41\0\5\32\1\33\14\32"+
    "\1\0\1\32\1\0\1\32\1\0\3\32\1\0\1\32"+
    "\5\0\2\32\3\7\1\33\14\7\1\0\1\7\1\0"+
    "\1\7\1\0\3\7\1\0\1\7\1\10\2\0\30\10"+
    "\1\0\3\10\1\0\1\10\2\0\1\12\36\0\2\34"+
    "\1\0\23\34\1\35\3\34\1\36\5\34\1\35\2\0"+
    "\1\16\36\0\1\17\2\0\36\17\5\0\5\20\1\0"+
    "\14\20\1\0\1\20\1\0\1\20\1\0\3\20\1\0"+
    "\1\20\11\0\1\21\4\0\1\37\7\0\1\21\1\40"+
    "\1\37\1\0\1\21\5\0\1\21\5\0\5\20\1\0"+
    "\1\20\1\41\12\20\1\0\1\20\1\0\1\20\1\0"+
    "\3\20\1\0\1\20\5\0\5\20\1\0\3\20\1\42"+
    "\10\20\1\0\1\20\1\0\1\20\1\0\3\20\1\0"+
    "\1\20\5\0\5\20\1\0\10\20\1\43\3\20\1\0"+
    "\1\20\1\0\1\20\1\0\3\20\1\0\1\20\5\0"+
    "\5\20\1\0\5\20\1\44\6\20\1\0\1\20\1\0"+
    "\1\20\1\0\3\20\1\0\1\20\5\0\5\20\1\0"+
    "\2\20\1\45\11\20\1\0\1\20\1\0\1\20\1\0"+
    "\3\20\1\0\1\20\11\0\1\40\14\0\1\40\3\0"+
    "\1\40\5\0\1\40\5\0\5\20\1\0\14\20\1\0"+
    "\1\20\1\0\1\20\1\0\2\20\1\46\1\0\1\20"+
    "\26\0\1\36\3\0\1\36\5\0\1\36\26\0\1\47"+
    "\3\0\1\47\5\0\1\47\11\0\1\50\14\0\1\50"+
    "\2\0\1\51\1\50\5\0\1\50\11\0\1\40\4\0"+
    "\1\37\7\0\1\40\1\0\1\37\1\0\1\40\5\0"+
    "\1\40\5\0\5\20\1\0\2\20\1\52\11\20\1\0"+
    "\1\20\1\0\1\20\1\0\3\20\1\0\1\20\5\0"+
    "\5\20\1\0\14\20\1\0\1\20\1\0\1\20\1\0"+
    "\1\53\2\20\1\0\1\20\5\0\5\20\1\0\11\20"+
    "\1\54\2\20\1\0\1\20\1\0\1\20\1\0\3\20"+
    "\1\0\1\20\5\0\5\20\1\0\6\20\1\55\5\20"+
    "\1\0\1\20\1\0\1\20\1\0\3\20\1\0\1\20"+
    "\5\0\5\20\1\0\6\20\1\56\5\20\1\0\1\20"+
    "\1\0\1\20\1\0\3\20\1\0\1\20\5\0\5\20"+
    "\1\0\10\20\1\57\3\20\1\0\1\20\1\0\1\20"+
    "\1\0\3\20\1\0\1\20\11\0\1\50\14\0\1\50"+
    "\3\0\1\50\5\0\1\50\5\0\5\20\1\0\3\20"+
    "\1\60\10\20\1\0\1\20\1\0\1\20\1\0\3\20"+
    "\1\0\1\20\5\0\5\20\1\0\12\20\1\61\1\20"+
    "\1\0\1\20\1\0\1\20\1\0\3\20\1\0\1\20"+
    "\5\0\5\20\1\0\3\20\1\62\10\20\1\0\1\20"+
    "\1\0\1\20\1\0\3\20\1\0\1\20\5\0\5\20"+
    "\1\0\7\20\1\52\4\20\1\0\1\20\1\0\1\20"+
    "\1\0\3\20\1\0\1\20\5\0\5\20\1\0\6\20"+
    "\1\60\5\20\1\0\1\20\1\0\1\20\1\0\3\20"+
    "\1\0\1\20\5\0\5\20\1\0\7\20\1\63\4\20"+
    "\1\0\1\20\1\0\1\20\1\0\3\20\1\0\1\20"+
    "\5\0\5\20\1\0\7\20\1\64\4\20\1\0\1\20"+
    "\1\0\1\20\1\0\3\20\1\0\1\20\5\0\5\20"+
    "\1\0\4\20\1\65\7\20\1\0\1\20\1\0\1\20"+
    "\1\0\3\20\1\0\1\20\5\0\5\20\1\0\1\66"+
    "\13\20\1\0\1\20\1\0\1\20\1\0\3\20\1\0"+
    "\1\20\5\0\5\20\1\0\1\67\13\20\1\0\1\20"+
    "\1\0\1\20\1\0\3\20\1\0\1\20\5\0\5\20"+
    "\1\0\12\20\1\70\1\20\1\0\1\20\1\0\1\20"+
    "\1\0\3\20\1\0\1\20\5\0\5\20\1\0\5\20"+
    "\1\71\6\20\1\0\1\20\1\0\1\20\1\0\3\20"+
    "\1\0\1\20\5\0\5\20\1\0\3\20\1\72\10\20"+
    "\1\0\1\20\1\0\1\20\1\0\3\20\1\0\1\20"+
    "\5\0\5\20\1\0\10\20\1\73\3\20\1\0\1\20"+
    "\1\0\1\20\1\0\3\20\1\0\1\20\5\0\5\20"+
    "\1\0\10\20\1\74\3\20\1\0\1\20\1\0\1\20"+
    "\1\0\3\20\1\0\1\20\5\0\5\20\1\0\1\20"+
    "\1\75\12\20\1\0\1\20\1\0\1\20\1\0\3\20"+
    "\1\0\1\20\5\0\5\20\1\0\3\20\1\76\10\20"+
    "\1\0\1\20\1\0\1\20\1\0\3\20\1\0\1\20"+
    "\5\0\5\20\1\0\1\75\13\20\1\0\1\20\1\0"+
    "\1\20\1\0\3\20\1\0\1\20\5\0\4\20\1\77"+
    "\1\0\13\20\1\100\1\0\1\20\1\0\1\77\1\0"+
    "\3\20\1\0\1\77\5\0\5\20\1\0\11\20\1\60"+
    "\2\20\1\0\1\20\1\0\1\20\1\0\3\20\1\0"+
    "\1\20\5\0\4\20\1\77\1\0\13\20\1\77\1\0"+
    "\1\20\1\0\1\77\1\0\3\20\1\0\1\77";

  private static int [] zzUnpackTrans() {
    int [] result = new int[1749];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\5\1\1\11\1\1\1\11\1\1\1\11"+
    "\12\1\1\11\1\0\2\11\2\1\1\0\7\1\1\11"+
    "\1\1\1\0\27\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[64];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

  StringBuffer string = new StringBuffer();


    /**
     * Create an empty lexer, yyrset will be called later to reset and assign
     * the reader
     */
    public FlasmLexer() {

    }

    public int yychar() {
        return yychar;
    }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public FlasmLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public FlasmLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1736) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { yybegin(YYINITIAL);
                                   return token(TokenType.ERROR,tokenStart, tokenLength);
          }
        case 15: break;
        case 13: 
          { return token(TokenType.KEYWORD);
          }
        case 16: break;
        case 11: 
          { return token(TokenType.IDENTIFIER,yychar,yylength()-1);
          }
        case 17: break;
        case 10: 
          { yybegin(STRING);
                                    tokenStart = yychar;
                                    tokenLength = 1;
          }
        case 18: break;
        case 14: 
          { return token(TokenType.KEYWORD2);
          }
        case 19: break;
        case 12: 
          { tokenLength += 2;
          }
        case 20: break;
        case 5: 
          { yybegin(PARAMETERS);
                                     // length also includes the trailing quote
                                     return token(TokenType.STRING, tokenStart, tokenLength + 1);
          }
        case 21: break;
        case 8: 
          { return token(TokenType.IDENTIFIER);
          }
        case 22: break;
        case 2: 
          { yybegin(PARAMETERS);
                                        return token(TokenType.KEYWORD);
          }
        case 23: break;
        case 7: 
          { return token(TokenType.COMMENT);
          }
        case 24: break;
        case 9: 
          { return token(TokenType.NUMBER);
          }
        case 25: break;
        case 6: 
          { yybegin(YYINITIAL);
          }
        case 26: break;
        case 1: 
          { 
          }
        case 27: break;
        case 3: 
          { tokenLength += yylength();
          }
        case 28: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              {
                return null;
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
