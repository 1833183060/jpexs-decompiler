/* The following code was generated by JFlex 1.4.3 on 20.3.14 15:36 */

/*
 * Copyright (C) 2010-2014 JPEXS
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package com.jpexs.decompiler.flash.abc.avm2.parser.script;

import com.jpexs.decompiler.flash.abc.avm2.parser.ParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.Stack;

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3 on 20.3.14 15:36 from the
 * specification file
 * <tt>C:/Dropbox/Programovani/JavaSE/FFDec/trunk/src/com/jpexs/decompiler/flash/abc/avm2/parser/script/actionscript.flex</tt>
 */
public final class ActionScriptLexer {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = -1;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int XML = 8;
    public static final int XMLSTARTTAG = 6;
    public static final int STRING = 2;
    public static final int YYINITIAL = 0;
    public static final int CHARLITERAL = 4;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l at the
     * beginning of a line l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
        0, 0, 1, 1, 2, 2, 3, 3, 4, 4
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED
            = "\11\7\1\3\1\2\1\0\1\3\1\1\16\7\4\0\1\14\1\72"
            + "\1\16\1\0\1\6\1\101\1\75\1\30\1\62\1\63\1\5\1\77"
            + "\1\71\1\26\1\11\1\4\1\17\3\23\4\24\2\20\1\10\1\70"
            + "\1\12\1\15\1\13\1\74\1\102\4\22\1\25\1\22\2\6\1\60"
            + "\4\6\1\61\11\6\1\21\2\6\1\66\1\27\1\67\1\100\1\6"
            + "\1\0\1\34\1\31\1\36\1\45\1\33\1\46\1\57\1\51\1\43"
            + "\1\6\1\35\1\47\1\54\1\41\1\40\1\52\1\6\1\32\1\37"
            + "\1\42\1\44\1\55\1\50\1\56\1\53\1\6\1\64\1\76\1\65"
            + "\1\73\41\7\2\0\4\6\4\0\1\6\2\0\1\7\7\0\1\6"
            + "\4\0\1\6\5\0\27\6\1\0\37\6\1\0\u01ca\6\4\0\14\6"
            + "\16\0\5\6\7\0\1\6\1\0\1\6\21\0\160\7\5\6\1\0"
            + "\2\6\2\0\4\6\10\0\1\6\1\0\3\6\1\0\1\6\1\0"
            + "\24\6\1\0\123\6\1\0\213\6\1\0\5\7\2\0\236\6\11\0"
            + "\46\6\2\0\1\6\7\0\47\6\11\0\55\7\1\0\1\7\1\0"
            + "\2\7\1\0\2\7\1\0\1\7\10\0\33\6\5\0\3\6\15\0"
            + "\4\7\7\0\1\6\4\0\13\7\5\0\53\6\37\7\4\0\2\6"
            + "\1\7\143\6\1\0\1\6\10\7\1\0\6\7\2\6\2\7\1\0"
            + "\4\7\2\6\12\7\3\6\2\0\1\6\17\0\1\7\1\6\1\7"
            + "\36\6\33\7\2\0\131\6\13\7\1\6\16\0\12\7\41\6\11\7"
            + "\2\6\4\0\1\6\5\0\26\6\4\7\1\6\11\7\1\6\3\7"
            + "\1\6\5\7\22\0\31\6\3\7\244\0\4\7\66\6\3\7\1\6"
            + "\22\7\1\6\7\7\12\6\2\7\2\0\12\7\1\0\7\6\1\0"
            + "\7\6\1\0\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0"
            + "\7\6\1\0\1\6\3\0\4\6\2\0\1\7\1\6\7\7\2\0"
            + "\2\7\2\0\3\7\1\6\10\0\1\7\4\0\2\6\1\0\3\6"
            + "\2\7\2\0\12\7\4\6\7\0\1\6\5\0\3\7\1\0\6\6"
            + "\4\0\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\2\6"
            + "\1\0\2\6\2\0\1\7\1\0\5\7\4\0\2\7\2\0\3\7"
            + "\3\0\1\7\7\0\4\6\1\0\1\6\7\0\14\7\3\6\1\7"
            + "\13\0\3\7\1\0\11\6\1\0\3\6\1\0\26\6\1\0\7\6"
            + "\1\0\2\6\1\0\5\6\2\0\1\7\1\6\10\7\1\0\3\7"
            + "\1\0\3\7\2\0\1\6\17\0\2\6\2\7\2\0\12\7\1\0"
            + "\1\6\17\0\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0"
            + "\7\6\1\0\2\6\1\0\5\6\2\0\1\7\1\6\7\7\2\0"
            + "\2\7\2\0\3\7\10\0\2\7\4\0\2\6\1\0\3\6\2\7"
            + "\2\0\12\7\1\0\1\6\20\0\1\7\1\6\1\0\6\6\3\0"
            + "\3\6\1\0\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0"
            + "\2\6\3\0\3\6\3\0\14\6\4\0\5\7\3\0\3\7\1\0"
            + "\4\7\2\0\1\6\6\0\1\7\16\0\12\7\11\0\1\6\7\0"
            + "\3\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0"
            + "\5\6\3\0\1\6\7\7\1\0\3\7\1\0\4\7\7\0\2\7"
            + "\1\0\2\6\6\0\2\6\2\7\2\0\12\7\22\0\2\7\1\0"
            + "\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6\2\0"
            + "\1\7\1\6\7\7\1\0\3\7\1\0\4\7\7\0\2\7\7\0"
            + "\1\6\1\0\2\6\2\7\2\0\12\7\1\0\2\6\17\0\2\7"
            + "\1\0\10\6\1\0\3\6\1\0\51\6\2\0\1\6\7\7\1\0"
            + "\3\7\1\0\4\7\1\6\10\0\1\7\10\0\2\6\2\7\2\0"
            + "\12\7\12\0\6\6\2\0\2\7\1\0\22\6\3\0\30\6\1\0"
            + "\11\6\1\0\1\6\2\0\7\6\3\0\1\7\4\0\6\7\1\0"
            + "\1\7\1\0\10\7\22\0\2\7\15\0\60\6\1\7\2\6\7\7"
            + "\4\0\10\6\10\7\1\0\12\7\47\0\2\6\1\0\1\6\2\0"
            + "\2\6\1\0\1\6\2\0\1\6\6\0\4\6\1\0\7\6\1\0"
            + "\3\6\1\0\1\6\1\0\1\6\2\0\2\6\1\0\4\6\1\7"
            + "\2\6\6\7\1\0\2\7\1\6\2\0\5\6\1\0\1\6\1\0"
            + "\6\7\2\0\12\7\2\0\2\6\42\0\1\6\27\0\2\7\6\0"
            + "\12\7\13\0\1\7\1\0\1\7\1\0\1\7\4\0\2\7\10\6"
            + "\1\0\44\6\4\0\24\7\1\0\2\7\5\6\13\7\1\0\44\7"
            + "\11\0\1\7\71\0\53\6\24\7\1\6\12\7\6\0\6\6\4\7"
            + "\4\6\3\7\1\6\3\7\2\6\7\7\3\6\4\7\15\6\14\7"
            + "\1\6\17\7\2\0\46\6\12\0\53\6\1\0\1\6\3\0\u0149\6"
            + "\1\0\4\6\2\0\7\6\1\0\1\6\1\0\4\6\2\0\51\6"
            + "\1\0\4\6\2\0\41\6\1\0\4\6\2\0\7\6\1\0\1\6"
            + "\1\0\4\6\2\0\17\6\1\0\71\6\1\0\4\6\2\0\103\6"
            + "\2\0\3\7\40\0\20\6\20\0\125\6\14\0\u026c\6\2\0\21\6"
            + "\1\0\32\6\5\0\113\6\3\0\3\6\17\0\15\6\1\0\4\6"
            + "\3\7\13\0\22\6\3\7\13\0\22\6\2\7\14\0\15\6\1\0"
            + "\3\6\1\0\2\7\14\0\64\6\40\7\3\0\1\6\3\0\2\6"
            + "\1\7\2\0\12\7\41\0\3\7\2\0\12\7\6\0\130\6\10\0"
            + "\51\6\1\7\1\6\5\0\106\6\12\0\35\6\3\0\14\7\4\0"
            + "\14\7\12\0\12\7\36\6\2\0\5\6\13\0\54\6\4\0\21\7"
            + "\7\6\2\7\6\0\12\7\46\0\27\6\5\7\4\0\65\6\12\7"
            + "\1\0\35\7\2\0\13\7\6\0\12\7\15\0\1\6\130\0\5\7"
            + "\57\6\21\7\7\6\4\0\12\7\21\0\11\7\14\0\3\7\36\6"
            + "\12\7\3\0\2\6\12\7\6\0\46\6\16\7\14\0\44\6\24\7"
            + "\10\0\12\7\3\0\3\6\12\7\44\6\122\0\3\7\1\0\25\7"
            + "\4\6\1\7\4\6\1\7\15\0\300\6\47\7\25\0\4\7\u0116\6"
            + "\2\0\6\6\2\0\46\6\2\0\6\6\2\0\10\6\1\0\1\6"
            + "\1\0\1\6\1\0\1\6\1\0\37\6\2\0\65\6\1\0\7\6"
            + "\1\0\1\6\3\0\3\6\1\0\7\6\3\0\4\6\2\0\6\6"
            + "\4\0\15\6\5\0\3\6\1\0\7\6\16\0\5\7\32\0\5\7"
            + "\20\0\2\6\23\0\1\6\13\0\5\7\5\0\6\7\1\0\1\6"
            + "\15\0\1\6\20\0\15\6\3\0\32\6\26\0\15\7\4\0\1\7"
            + "\3\0\14\7\21\0\1\6\4\0\1\6\2\0\12\6\1\0\1\6"
            + "\3\0\5\6\6\0\1\6\1\0\1\6\1\0\1\6\1\0\4\6"
            + "\1\0\13\6\2\0\4\6\5\0\5\6\4\0\1\6\21\0\51\6"
            + "\u0a77\0\57\6\1\0\57\6\1\0\205\6\6\0\4\6\3\7\16\0"
            + "\46\6\12\0\66\6\11\0\1\6\17\0\1\7\27\6\11\0\7\6"
            + "\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6"
            + "\1\0\7\6\1\0\7\6\1\0\40\7\57\0\1\6\u01d5\0\3\6"
            + "\31\0\11\6\6\7\1\0\5\6\2\0\5\6\4\0\126\6\2\0"
            + "\2\7\2\0\3\6\1\0\132\6\1\0\4\6\5\0\51\6\3\0"
            + "\136\6\21\0\33\6\65\0\20\6\u0200\0\u19b6\6\112\0\u51cc\6\64\0"
            + "\u048d\6\103\0\56\6\2\0\u010d\6\3\0\20\6\12\7\2\6\24\0"
            + "\57\6\1\7\14\0\2\7\1\0\31\6\10\0\120\6\2\7\45\0"
            + "\11\6\2\0\147\6\2\0\4\6\1\0\2\6\16\0\12\6\120\0"
            + "\10\6\1\7\3\6\1\7\4\6\1\7\27\6\5\7\20\0\1\6"
            + "\7\0\64\6\14\0\2\7\62\6\21\7\13\0\12\7\6\0\22\7"
            + "\6\6\3\0\1\6\4\0\12\7\34\6\10\7\2\0\27\6\15\7"
            + "\14\0\35\6\3\0\4\7\57\6\16\7\16\0\1\6\12\7\46\0"
            + "\51\6\16\7\11\0\3\6\1\7\10\6\2\7\2\0\12\7\6\0"
            + "\27\6\3\0\1\6\1\7\4\0\60\6\1\7\1\6\3\7\2\6"
            + "\2\7\5\6\2\7\1\6\1\7\1\6\30\0\3\6\43\0\6\6"
            + "\2\0\6\6\2\0\6\6\11\0\7\6\1\0\7\6\221\0\43\6"
            + "\10\7\1\0\2\7\2\0\12\7\6\0\u2ba4\6\14\0\27\6\4\0"
            + "\61\6\u2104\0\u012e\6\2\0\76\6\2\0\152\6\46\0\7\6\14\0"
            + "\5\6\5\0\1\6\1\7\12\6\1\0\15\6\1\0\5\6\1\0"
            + "\1\6\1\0\2\6\1\0\2\6\1\0\154\6\41\0\u016b\6\22\0"
            + "\100\6\2\0\66\6\50\0\15\6\3\0\20\7\20\0\7\7\14\0"
            + "\2\6\30\0\3\6\31\0\1\6\6\0\5\6\1\0\207\6\2\0"
            + "\1\7\4\0\1\6\13\0\12\7\7\0\32\6\4\0\1\6\1\0"
            + "\32\6\13\0\131\6\3\0\6\6\2\0\6\6\2\0\6\6\2\0"
            + "\3\6\3\0\2\6\3\0\2\6\22\0\3\7\4\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0
            = "\5\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"
            + "\1\10\1\11\1\12\1\13\1\14\2\15\1\16\1\17"
            + "\23\6\1\20\1\21\1\22\1\23\1\24\1\25\1\26"
            + "\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36"
            + "\1\37\1\40\1\41\2\42\1\43\1\1\1\41\2\44"
            + "\1\41\1\1\1\45\3\41\1\3\1\0\1\46\1\47"
            + "\1\50\2\0\1\51\1\0\1\52\1\53\1\54\1\55"
            + "\1\56\1\57\1\51\1\0\2\57\1\0\1\60\1\61"
            + "\5\6\1\62\16\6\1\63\1\64\1\65\4\6\1\66"
            + "\17\6\1\67\1\70\1\71\1\72\1\73\1\74\1\75"
            + "\1\76\1\77\1\100\1\101\2\102\1\103\1\104\1\105"
            + "\1\106\1\107\1\110\1\111\6\0\2\3\2\0\1\112"
            + "\3\0\1\113\1\0\1\114\1\115\1\116\1\117\2\120"
            + "\1\57\1\51\1\0\11\6\1\121\4\6\1\122\3\6"
            + "\1\123\6\6\1\124\5\6\1\125\10\6\1\126\1\6"
            + "\1\127\1\6\1\130\1\131\1\102\7\0\1\132\5\0"
            + "\1\133\1\120\1\57\2\6\1\134\1\135\1\6\1\136"
            + "\11\6\1\137\1\140\1\6\1\141\14\6\1\142\5\6"
            + "\1\143\1\6\1\41\1\0\1\144\12\0\1\120\1\57"
            + "\1\145\2\6\1\146\1\147\1\6\1\150\1\6\1\151"
            + "\3\6\1\152\11\6\1\153\2\6\1\154\5\6\10\0"
            + "\1\120\1\57\1\155\2\6\1\156\1\157\2\6\1\160"
            + "\3\6\1\161\3\6\1\162\6\6\1\163\1\6\2\0"
            + "\1\113\1\120\1\57\1\164\10\6\1\165\1\166\1\167"
            + "\2\6\1\170\1\171\1\6\1\41\1\120\1\57\1\172"
            + "\1\173\2\6\1\174\3\6\1\175\1\6\1\176\1\120"
            + "\1\57\1\177\1\6\1\200\1\6\1\201\1\202\1\120"
            + "\1\57\1\203\1\204\6\57";

    private static int[] zzUnpackAction() {
        int[] result = new int[418];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */

        int j = offset;  /* index in unpacked array */

        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0
            = "\0\0\0\103\0\206\0\311\0\u010c\0\u014f\0\u0192\0\u014f"
            + "\0\u01d5\0\u0218\0\u025b\0\u029e\0\u02e1\0\u0324\0\u0367\0\u03aa"
            + "\0\u03ed\0\u014f\0\u0430\0\u0473\0\u04b6\0\u014f\0\u04f9\0\u053c"
            + "\0\u057f\0\u05c2\0\u0605\0\u0648\0\u068b\0\u06ce\0\u0711\0\u0754"
            + "\0\u0797\0\u07da\0\u081d\0\u0860\0\u08a3\0\u08e6\0\u0929\0\u096c"
            + "\0\u09af\0\u014f\0\u014f\0\u014f\0\u014f\0\u014f\0\u014f\0\u014f"
            + "\0\u014f\0\u09f2\0\u014f\0\u014f\0\u0a35\0\u0a78\0\u0abb\0\u0afe"
            + "\0\u0b41\0\u014f\0\u0b84\0\u0bc7\0\u014f\0\u014f\0\u0c0a\0\u0c4d"
            + "\0\u0c90\0\u014f\0\u0cd3\0\u0d16\0\u014f\0\u0d59\0\u014f\0\u0d9c"
            + "\0\u0ddf\0\u0e22\0\u014f\0\u014f\0\u014f\0\u0e65\0\u0ea8\0\u0eeb"
            + "\0\u0f2e\0\u0f71\0\u014f\0\u0fb4\0\u014f\0\u0ff7\0\u103a\0\u107d"
            + "\0\u10c0\0\u1103\0\u1146\0\u1189\0\u014f\0\u014f\0\u11cc\0\u120f"
            + "\0\u1252\0\u1295\0\u12d8\0\u029e\0\u131b\0\u135e\0\u13a1\0\u13e4"
            + "\0\u1427\0\u146a\0\u14ad\0\u14f0\0\u1533\0\u1576\0\u15b9\0\u15fc"
            + "\0\u163f\0\u1682\0\u029e\0\u16c5\0\u029e\0\u1708\0\u174b\0\u178e"
            + "\0\u17d1\0\u029e\0\u1814\0\u1857\0\u189a\0\u18dd\0\u1920\0\u1963"
            + "\0\u19a6\0\u19e9\0\u1a2c\0\u1a6f\0\u1ab2\0\u1af5\0\u1b38\0\u1b7b"
            + "\0\u1bbe\0\u1c01\0\u014f\0\u014f\0\u014f\0\u014f\0\u014f\0\u014f"
            + "\0\u014f\0\u014f\0\u014f\0\u014f\0\u1c44\0\u1c87\0\u014f\0\u014f"
            + "\0\u014f\0\u014f\0\u014f\0\u014f\0\u014f\0\u0d16\0\u1cca\0\u1d0d"
            + "\0\u1d50\0\u1d93\0\u1dd6\0\u1e19\0\u014f\0\u1e5c\0\u1e9f\0\u014f"
            + "\0\u1ee2\0\u1f25\0\u1f68\0\u014f\0\u1fab\0\u014f\0\u1fee\0\u014f"
            + "\0\u014f\0\u10c0\0\u2031\0\u2074\0\u20b7\0\u20b7\0\u20fa\0\u213d"
            + "\0\u2180\0\u21c3\0\u2206\0\u2249\0\u228c\0\u22cf\0\u2312\0\u029e"
            + "\0\u2355\0\u2398\0\u23db\0\u241e\0\u029e\0\u2461\0\u24a4\0\u24e7"
            + "\0\u029e\0\u252a\0\u256d\0\u25b0\0\u25f3\0\u2636\0\u2679\0\u029e"
            + "\0\u26bc\0\u26ff\0\u2742\0\u2785\0\u27c8\0\u029e\0\u280b\0\u284e"
            + "\0\u2891\0\u28d4\0\u2917\0\u295a\0\u299d\0\u29e0\0\u029e\0\u2a23"
            + "\0\u029e\0\u2a66\0\u029e\0\u014f\0\u014f\0\u2aa9\0\u2aec\0\u2b2f"
            + "\0\u2b72\0\u2bb5\0\u2bf8\0\u2c3b\0\u014f\0\u2c7e\0\u2cc1\0\u2d04"
            + "\0\u2d47\0\u2d8a\0\u014f\0\u2dcd\0\u2e10\0\u2e53\0\u2e96\0\u029e"
            + "\0\u029e\0\u2ed9\0\u029e\0\u2f1c\0\u2f5f\0\u2fa2\0\u2fe5\0\u3028"
            + "\0\u306b\0\u30ae\0\u30f1\0\u3134\0\u029e\0\u029e\0\u3177\0\u029e"
            + "\0\u31ba\0\u31fd\0\u3240\0\u3283\0\u32c6\0\u3309\0\u334c\0\u338f"
            + "\0\u33d2\0\u3415\0\u3458\0\u349b\0\u029e\0\u34de\0\u3521\0\u3564"
            + "\0\u35a7\0\u35ea\0\u029e\0\u362d\0\u3670\0\u36b3\0\u014f\0\u36f6"
            + "\0\u3739\0\u377c\0\u37bf\0\u3802\0\u3845\0\u3888\0\u38cb\0\u390e"
            + "\0\u3951\0\u3994\0\u39d7\0\u029e\0\u3a1a\0\u3a5d\0\u029e\0\u029e"
            + "\0\u3aa0\0\u029e\0\u3ae3\0\u029e\0\u3b26\0\u3b69\0\u3bac\0\u029e"
            + "\0\u3bef\0\u3c32\0\u3c75\0\u3cb8\0\u3cfb\0\u3d3e\0\u3d81\0\u3dc4"
            + "\0\u3e07\0\u029e\0\u3e4a\0\u3e8d\0\u029e\0\u3ed0\0\u3f13\0\u3f56"
            + "\0\u3f99\0\u3fdc\0\u401f\0\u4062\0\u40a5\0\u40e8\0\u412b\0\u416e"
            + "\0\u41b1\0\u41f4\0\u4237\0\u427a\0\u029e\0\u42bd\0\u4300\0\u029e"
            + "\0\u029e\0\u4343\0\u4386\0\u029e\0\u43c9\0\u440c\0\u444f\0\u029e"
            + "\0\u4492\0\u44d5\0\u4518\0\u029e\0\u455b\0\u459e\0\u45e1\0\u4624"
            + "\0\u4667\0\u46aa\0\u029e\0\u46ed\0\u4730\0\u4773\0\u3888\0\u47b6"
            + "\0\u47f9\0\u029e\0\u483c\0\u487f\0\u48c2\0\u4905\0\u4948\0\u498b"
            + "\0\u49ce\0\u4a11\0\u029e\0\u029e\0\u029e\0\u4a54\0\u4a97\0\u029e"
            + "\0\u029e\0\u4ada\0\u40a5\0\u4b1d\0\u4b60\0\u029e\0\u029e\0\u4ba3"
            + "\0\u4be6\0\u029e\0\u4c29\0\u4c6c\0\u4caf\0\u029e\0\u4cf2\0\u029e"
            + "\0\u4d35\0\u4d78\0\u029e\0\u4dbb\0\u029e\0\u4dfe\0\u029e\0\u029e"
            + "\0\u014f\0\u4e41\0\u029e\0\u029e\0\u4e84\0\u4ec7\0\u4f0a\0\u4f4d"
            + "\0\u4f90\0\u107d";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[418];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;  /* index in packed string  */

        int j = offset;  /* index in unpacked array */

        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0
            = "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\6"
            + "\1\15\1\16\1\17\1\20\1\11\1\21\1\22\1\23"
            + "\1\24\2\14\2\24\1\14\1\25\1\6\1\26\1\27"
            + "\1\30\1\31\1\32\1\14\1\33\1\34\1\35\1\36"
            + "\1\37\1\40\1\41\1\42\1\43\1\14\1\44\1\14"
            + "\1\45\2\14\1\46\1\14\1\47\1\50\1\51\1\52"
            + "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"
            + "\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72"
            + "\1\73\1\74\1\75\13\73\1\76\10\73\1\77\53\73"
            + "\1\100\1\74\1\75\24\100\1\77\1\76\52\100\1\6"
            + "\1\101\1\102\1\103\2\6\1\104\4\6\1\105\1\106"
            + "\4\6\2\104\2\6\1\104\3\6\31\104\21\6\1\107"
            + "\1\101\1\102\7\107\1\110\70\107\105\0\1\10\103\0"
            + "\1\11\10\0\1\11\72\0\1\111\1\112\7\0\1\113"
            + "\102\0\1\114\73\0\2\14\7\0\7\14\3\0\31\14"
            + "\31\0\1\115\103\0\1\116\1\117\4\0\2\120\2\0"
            + "\2\120\64\0\1\121\3\0\1\122\2\0\1\123\3\0"
            + "\2\121\2\0\1\121\3\0\31\121\34\0\1\124\1\0"
            + "\1\125\102\0\1\126\76\0\1\120\5\0\1\127\1\130"
            + "\1\131\1\0\1\132\1\133\1\134\5\0\1\134\22\0"
            + "\1\131\35\0\1\120\5\0\2\24\2\0\2\24\1\134"
            + "\5\0\1\134\64\0\1\135\10\0\1\136\62\0\2\14"
            + "\7\0\7\14\3\0\1\14\1\137\27\14\27\0\2\14"
            + "\7\0\7\14\3\0\2\14\1\140\26\14\27\0\2\14"
            + "\7\0\7\14\3\0\3\14\1\141\12\14\1\142\6\14"
            + "\1\143\3\14\27\0\2\14\7\0\7\14\3\0\6\14"
            + "\1\144\22\14\27\0\2\14\7\0\7\14\3\0\3\14"
            + "\1\145\3\14\1\146\6\14\1\147\12\14\27\0\2\14"
            + "\7\0\7\14\3\0\2\14\1\150\6\14\1\151\1\14"
            + "\1\152\3\14\1\153\11\14\27\0\2\14\7\0\7\14"
            + "\3\0\24\14\1\154\4\14\27\0\2\14\7\0\7\14"
            + "\3\0\2\14\1\155\1\156\7\14\1\157\15\14\27\0"
            + "\2\14\7\0\7\14\3\0\1\14\1\160\16\14\1\161"
            + "\1\14\1\162\6\14\27\0\2\14\7\0\7\14\3\0"
            + "\6\14\1\163\1\14\1\164\4\14\1\165\5\14\1\166"
            + "\5\14\27\0\2\14\7\0\7\14\3\0\6\14\1\167"
            + "\1\14\1\170\20\14\27\0\2\14\7\0\7\14\3\0"
            + "\2\14\1\171\4\14\1\172\12\14\1\173\6\14\27\0"
            + "\2\14\7\0\7\14\3\0\3\14\1\174\3\14\1\175"
            + "\2\14\1\176\1\177\15\14\27\0\2\14\7\0\7\14"
            + "\3\0\12\14\1\200\5\14\1\201\10\14\27\0\2\14"
            + "\7\0\7\14\3\0\1\14\1\202\1\14\1\203\7\14"
            + "\1\204\15\14\27\0\2\14\7\0\7\14\3\0\3\14"
            + "\1\205\3\14\1\206\21\14\27\0\2\14\7\0\7\14"
            + "\3\0\2\14\1\207\26\14\27\0\2\14\7\0\7\14"
            + "\3\0\10\14\1\210\20\14\27\0\2\14\7\0\7\14"
            + "\3\0\3\14\1\211\25\14\36\0\1\212\102\0\1\213"
            + "\57\0\1\214\22\0\1\215\60\0\1\216\21\0\1\217"
            + "\61\0\1\220\20\0\1\221\102\0\1\222\65\0\1\73"
            + "\2\0\13\73\1\0\10\73\1\0\53\73\2\0\1\75"
            + "\100\0\2\223\1\0\13\223\1\224\1\225\3\223\1\225"
            + "\1\226\2\223\1\227\1\230\1\231\1\232\6\223\1\233"
            + "\1\234\3\223\1\235\34\223\1\100\2\0\24\100\2\0"
            + "\52\100\2\0\1\102\103\0\1\103\10\0\1\103\74\0"
            + "\2\236\1\237\3\0\1\240\1\241\1\0\7\236\3\0"
            + "\31\236\24\0\1\103\2\0\1\236\5\0\1\106\4\0"
            + "\2\236\2\0\1\236\3\0\31\236\25\0\1\242\1\0"
            + "\1\243\12\0\2\243\2\0\1\243\3\0\31\243\21\0"
            + "\1\111\1\244\1\245\100\111\5\246\1\247\75\246\11\0"
            + "\1\250\77\0\1\251\12\0\2\251\2\0\1\251\3\0"
            + "\31\251\40\0\2\120\2\0\2\120\1\134\5\0\1\134"
            + "\55\0\1\252\1\121\1\253\2\0\1\254\1\255\2\0"
            + "\2\121\2\252\2\121\1\252\3\0\31\252\36\0\1\256"
            + "\100\0\1\257\1\0\1\260\102\0\1\261\76\0\1\120"
            + "\5\0\1\127\1\130\2\0\1\132\1\133\1\134\5\0"
            + "\1\134\60\0\1\120\5\0\2\130\2\0\2\130\1\134"
            + "\5\0\1\134\66\0\1\262\1\263\1\0\4\263\3\0"
            + "\1\263\1\0\2\263\1\0\1\263\6\0\2\263\45\0"
            + "\1\120\5\0\1\133\1\130\2\0\2\133\1\134\5\0"
            + "\1\134\60\0\1\120\5\0\1\264\1\130\2\0\2\264"
            + "\1\134\5\0\1\134\66\0\2\265\2\0\2\265\1\0"
            + "\1\266\50\0\1\266\11\0\2\14\7\0\7\14\3\0"
            + "\2\14\1\267\26\14\27\0\2\14\7\0\7\14\3\0"
            + "\11\14\1\270\17\14\27\0\2\14\7\0\7\14\3\0"
            + "\5\14\1\271\23\14\27\0\2\14\7\0\7\14\3\0"
            + "\6\14\1\272\22\14\27\0\2\14\7\0\7\14\3\0"
            + "\11\14\1\273\17\14\27\0\2\14\7\0\7\14\3\0"
            + "\6\14\1\274\2\14\1\275\17\14\27\0\2\14\7\0"
            + "\7\14\3\0\10\14\1\276\20\14\27\0\2\14\7\0"
            + "\7\14\3\0\3\14\1\277\25\14\27\0\2\14\7\0"
            + "\7\14\3\0\11\14\1\300\17\14\27\0\2\14\7\0"
            + "\7\14\3\0\3\14\1\301\25\14\27\0\2\14\7\0"
            + "\7\14\3\0\21\14\1\302\7\14\27\0\2\14\7\0"
            + "\7\14\3\0\12\14\1\303\16\14\27\0\2\14\7\0"
            + "\7\14\3\0\2\14\1\304\26\14\27\0\2\14\7\0"
            + "\7\14\3\0\17\14\1\305\11\14\27\0\2\14\7\0"
            + "\7\14\3\0\23\14\1\306\5\14\27\0\2\14\7\0"
            + "\7\14\3\0\16\14\1\307\12\14\27\0\2\14\7\0"
            + "\7\14\3\0\13\14\1\310\6\14\1\311\6\14\27\0"
            + "\2\14\7\0\7\14\3\0\1\14\1\312\10\14\1\313"
            + "\16\14\27\0\2\14\7\0\7\14\3\0\21\14\1\314"
            + "\7\14\27\0\2\14\7\0\7\14\3\0\6\14\1\315"
            + "\2\14\1\316\17\14\27\0\2\14\7\0\7\14\3\0"
            + "\21\14\1\317\7\14\27\0\2\14\7\0\7\14\3\0"
            + "\2\14\1\320\26\14\27\0\2\14\7\0\7\14\3\0"
            + "\14\14\1\321\14\14\27\0\2\14\7\0\7\14\3\0"
            + "\15\14\1\322\1\323\12\14\27\0\2\14\7\0\7\14"
            + "\3\0\10\14\1\324\20\14\27\0\2\14\7\0\7\14"
            + "\3\0\16\14\1\325\12\14\27\0\2\14\7\0\7\14"
            + "\3\0\1\14\1\326\27\14\27\0\2\14\7\0\7\14"
            + "\3\0\10\14\1\327\20\14\27\0\2\14\7\0\7\14"
            + "\3\0\10\14\1\330\20\14\27\0\2\14\7\0\7\14"
            + "\3\0\11\14\1\331\17\14\27\0\2\14\7\0\7\14"
            + "\3\0\12\14\1\332\16\14\27\0\2\14\7\0\7\14"
            + "\3\0\7\14\1\333\2\14\1\334\16\14\27\0\2\14"
            + "\7\0\7\14\3\0\5\14\1\335\23\14\27\0\2\14"
            + "\7\0\7\14\3\0\1\336\30\14\27\0\2\14\7\0"
            + "\7\14\3\0\1\14\1\337\27\14\27\0\2\14\7\0"
            + "\7\14\3\0\12\14\1\340\16\14\27\0\2\14\7\0"
            + "\7\14\3\0\11\14\1\341\17\14\27\0\2\14\7\0"
            + "\7\14\3\0\15\14\1\342\13\14\27\0\2\14\7\0"
            + "\7\14\3\0\30\14\1\343\36\0\1\344\104\0\1\226"
            + "\3\0\2\226\75\0\1\345\3\0\2\345\64\0\1\346"
            + "\12\0\2\346\2\0\1\346\3\0\31\346\35\0\1\240"
            + "\1\241\101\0\1\241\1\0\1\347\72\0\1\350\12\0"
            + "\2\350\2\0\1\350\3\0\31\350\27\0\1\351\1\243"
            + "\1\352\2\0\1\107\1\353\2\0\2\243\2\351\2\243"
            + "\1\351\3\0\31\351\23\0\1\245\100\0\5\246\1\354"
            + "\75\246\4\0\1\245\1\247\103\0\2\251\3\0\1\355"
            + "\3\0\7\251\3\0\31\251\27\0\2\252\1\356\2\0"
            + "\1\254\1\357\1\360\1\0\7\252\3\0\31\252\27\0"
            + "\1\361\12\0\2\361\2\0\1\361\3\0\31\361\27\0"
            + "\1\362\5\0\1\255\4\0\2\362\2\0\1\362\3\0"
            + "\31\362\36\0\1\363\104\0\2\364\1\0\4\364\3\0"
            + "\1\364\1\0\2\364\1\0\1\364\6\0\2\364\45\0"
            + "\1\120\5\0\1\365\1\130\2\0\2\365\1\134\5\0"
            + "\1\134\66\0\2\265\2\0\2\265\64\0\2\14\7\0"
            + "\7\14\3\0\3\14\1\366\25\14\27\0\2\14\7\0"
            + "\7\14\3\0\13\14\1\367\15\14\27\0\2\14\7\0"
            + "\7\14\3\0\20\14\1\370\10\14\27\0\2\14\7\0"
            + "\7\14\3\0\2\14\1\371\26\14\27\0\2\14\7\0"
            + "\7\14\3\0\2\14\1\372\26\14\27\0\2\14\7\0"
            + "\7\14\3\0\2\14\1\373\26\14\27\0\2\14\7\0"
            + "\7\14\3\0\5\14\1\374\23\14\27\0\2\14\7\0"
            + "\7\14\3\0\6\14\1\375\2\14\1\376\17\14\27\0"
            + "\2\14\7\0\7\14\3\0\6\14\1\377\22\14\27\0"
            + "\2\14\7\0\7\14\3\0\11\14\1\u0100\17\14\27\0"
            + "\2\14\7\0\7\14\3\0\2\14\1\u0101\26\14\27\0"
            + "\2\14\7\0\7\14\3\0\11\14\1\u0102\17\14\27\0"
            + "\2\14\7\0\7\14\3\0\1\14\1\u0103\27\14\27\0"
            + "\2\14\7\0\7\14\3\0\2\14\1\u0104\26\14\27\0"
            + "\2\14\7\0\7\14\3\0\16\14\1\u0105\12\14\27\0"
            + "\2\14\7\0\7\14\3\0\2\14\1\u0106\26\14\27\0"
            + "\2\14\7\0\7\14\3\0\7\14\1\u0107\21\14\27\0"
            + "\2\14\7\0\7\14\3\0\6\14\1\u0108\22\14\27\0"
            + "\2\14\7\0\7\14\3\0\2\14\1\u0109\26\14\27\0"
            + "\2\14\7\0\7\14\3\0\11\14\1\u010a\17\14\27\0"
            + "\2\14\7\0\7\14\3\0\2\14\1\u010b\26\14\27\0"
            + "\2\14\7\0\7\14\3\0\7\14\1\u010c\6\14\1\u010d"
            + "\12\14\27\0\2\14\7\0\7\14\3\0\2\14\1\u010e"
            + "\26\14\27\0\2\14\7\0\7\14\3\0\3\14\1\u010f"
            + "\25\14\27\0\2\14\7\0\7\14\3\0\2\14\1\u0110"
            + "\26\14\27\0\2\14\7\0\7\14\3\0\3\14\1\u0111"
            + "\25\14\27\0\2\14\7\0\7\14\3\0\6\14\1\u0112"
            + "\22\14\27\0\2\14\7\0\7\14\3\0\3\14\1\u0113"
            + "\25\14\27\0\2\14\7\0\7\14\3\0\5\14\1\u0114"
            + "\23\14\27\0\2\14\7\0\7\14\3\0\20\14\1\u0115"
            + "\10\14\27\0\2\14\7\0\7\14\3\0\16\14\1\u0116"
            + "\12\14\27\0\2\14\7\0\7\14\3\0\11\14\1\u0117"
            + "\17\14\27\0\2\14\7\0\7\14\3\0\24\14\1\u0118"
            + "\4\14\27\0\2\14\7\0\7\14\3\0\4\14\1\u0119"
            + "\24\14\27\0\2\14\7\0\7\14\3\0\16\14\1\u011a"
            + "\12\14\27\0\2\14\7\0\7\14\3\0\14\14\1\u011b"
            + "\14\14\27\0\2\14\7\0\7\14\3\0\12\14\1\u011c"
            + "\16\14\27\0\2\346\4\0\1\240\1\241\1\0\7\346"
            + "\3\0\31\346\21\0\1\347\2\0\13\347\1\u011d\64\347"
            + "\6\0\2\350\1\u011e\2\0\1\u011f\3\0\7\350\3\0"
            + "\31\350\27\0\2\351\1\u0120\2\0\1\107\1\u0121\1\u0122"
            + "\1\0\7\351\3\0\31\351\27\0\1\u0123\12\0\2\u0123"
            + "\2\0\1\u0123\3\0\31\u0123\27\0\1\u0124\5\0\1\353"
            + "\4\0\2\u0124\2\0\1\u0124\3\0\31\u0124\21\0\4\246"
            + "\1\245\1\354\75\246\6\0\1\u0125\12\0\2\u0125\2\0"
            + "\1\u0125\3\0\31\u0125\27\0\1\362\5\0\1\357\1\360"
            + "\3\0\2\362\2\0\1\362\3\0\31\362\35\0\1\360"
            + "\1\0\1\u0126\72\0\1\u0127\1\361\3\0\1\254\1\255"
            + "\2\0\2\361\2\u0127\2\361\1\u0127\3\0\31\u0127\27\0"
            + "\2\362\1\u0128\3\0\1\u0129\1\360\1\0\7\362\3\0"
            + "\31\362\40\0\2\u012a\1\0\4\u012a\3\0\1\u012a\1\0"
            + "\2\u012a\1\0\1\u012a\6\0\2\u012a\45\0\1\120\5\0"
            + "\1\u012b\1\130\2\0\2\u012b\1\134\5\0\1\134\55\0"
            + "\2\14\7\0\7\14\3\0\4\14\1\u012c\24\14\27\0"
            + "\2\14\7\0\7\14\3\0\1\14\1\u012d\27\14\27\0"
            + "\2\14\7\0\7\14\3\0\10\14\1\u012e\20\14\27\0"
            + "\2\14\7\0\7\14\3\0\20\14\1\u012f\10\14\27\0"
            + "\2\14\7\0\7\14\3\0\11\14\1\u0130\17\14\27\0"
            + "\2\14\7\0\7\14\3\0\12\14\1\u0131\16\14\27\0"
            + "\2\14\7\0\7\14\3\0\6\14\1\u0132\22\14\27\0"
            + "\2\14\7\0\7\14\3\0\12\14\1\u0133\16\14\27\0"
            + "\2\14\7\0\7\14\3\0\1\14\1\u0134\27\14\27\0"
            + "\2\14\7\0\7\14\3\0\5\14\1\u0135\23\14\27\0"
            + "\2\14\7\0\7\14\3\0\1\14\1\u0136\27\14\27\0"
            + "\2\14\7\0\7\14\3\0\6\14\1\u0137\22\14\27\0"
            + "\2\14\7\0\7\14\3\0\17\14\1\u0138\11\14\27\0"
            + "\2\14\7\0\7\14\3\0\7\14\1\u0139\21\14\27\0"
            + "\2\14\7\0\7\14\3\0\3\14\1\u013a\25\14\27\0"
            + "\2\14\7\0\7\14\3\0\1\14\1\u013b\27\14\27\0"
            + "\2\14\7\0\7\14\3\0\1\14\1\u013c\27\14\27\0"
            + "\2\14\7\0\7\14\3\0\2\14\1\u013d\26\14\27\0"
            + "\2\14\7\0\7\14\3\0\15\14\1\u013e\13\14\27\0"
            + "\2\14\7\0\7\14\3\0\13\14\1\u013f\15\14\27\0"
            + "\2\14\7\0\7\14\3\0\11\14\1\u0140\17\14\27\0"
            + "\2\14\7\0\7\14\3\0\23\14\1\u0141\5\14\27\0"
            + "\2\14\7\0\7\14\3\0\2\14\1\u0142\26\14\27\0"
            + "\2\14\7\0\7\14\3\0\16\14\1\u0143\12\14\27\0"
            + "\2\14\7\0\7\14\3\0\11\14\1\u0144\17\14\27\0"
            + "\2\14\7\0\7\14\3\0\2\14\1\u0145\26\14\27\0"
            + "\2\14\7\0\7\14\3\0\2\14\1\u0146\26\14\27\0"
            + "\2\14\7\0\7\14\3\0\3\14\1\u0147\25\14\27\0"
            + "\2\14\7\0\7\14\3\0\3\14\1\u0148\25\14\27\0"
            + "\2\14\7\0\7\14\3\0\12\14\1\u0149\16\14\27\0"
            + "\2\14\7\0\7\14\3\0\10\14\1\u014a\20\14\21\0"
            + "\1\347\2\0\11\347\1\u011d\1\347\1\u011d\64\347\6\0"
            + "\1\u014b\12\0\2\u014b\2\0\1\u014b\3\0\31\u014b\27\0"
            + "\1\u014c\12\0\2\u014c\2\0\1\u014c\3\0\31\u014c\27\0"
            + "\1\u0124\5\0\1\u0121\1\u0122\3\0\2\u0124\2\0\1\u0124"
            + "\3\0\31\u0124\35\0\1\u0122\1\0\1\u014d\72\0\1\u014e"
            + "\1\u0123\3\0\1\107\1\353\2\0\2\u0123\2\u014e\2\u0123"
            + "\1\u014e\3\0\31\u014e\27\0\2\u0124\1\u014f\3\0\1\u0150"
            + "\1\u0122\1\0\7\u0124\3\0\31\u0124\27\0\1\u0127\1\u0125"
            + "\3\0\1\254\1\357\1\360\1\0\2\u0125\2\u0127\2\u0125"
            + "\1\u0127\3\0\31\u0127\21\0\1\u0126\2\0\13\u0126\1\u0151"
            + "\64\u0126\6\0\2\u0127\1\u0128\2\0\1\254\1\357\1\360"
            + "\1\0\7\u0127\3\0\31\u0127\27\0\1\u0152\12\0\2\u0152"
            + "\2\0\1\u0152\3\0\31\u0152\35\0\1\u0129\1\360\104\0"
            + "\2\u0153\1\0\4\u0153\3\0\1\u0153\1\0\2\u0153\1\0"
            + "\1\u0153\6\0\2\u0153\45\0\1\120\5\0\1\u0154\1\130"
            + "\2\0\2\u0154\1\134\5\0\1\134\55\0\2\14\7\0"
            + "\7\14\3\0\10\14\1\u0155\20\14\27\0\2\14\7\0"
            + "\7\14\3\0\14\14\1\u0156\14\14\27\0\2\14\7\0"
            + "\7\14\3\0\10\14\1\u0157\20\14\27\0\2\14\7\0"
            + "\7\14\3\0\5\14\1\u0158\23\14\27\0\2\14\7\0"
            + "\7\14\3\0\20\14\1\u0159\10\14\27\0\2\14\7\0"
            + "\7\14\3\0\12\14\1\u015a\16\14\27\0\2\14\7\0"
            + "\7\14\3\0\21\14\1\u015b\7\14\27\0\2\14\7\0"
            + "\7\14\3\0\15\14\1\u015c\13\14\27\0\2\14\7\0"
            + "\7\14\3\0\10\14\1\u015d\20\14\27\0\2\14\7\0"
            + "\7\14\3\0\10\14\1\u015e\4\14\1\u015f\13\14\27\0"
            + "\2\14\7\0\7\14\3\0\11\14\1\u0160\17\14\27\0"
            + "\2\14\7\0\7\14\3\0\23\14\1\u0161\5\14\27\0"
            + "\2\14\7\0\7\14\3\0\12\14\1\u0162\16\14\27\0"
            + "\2\14\7\0\7\14\3\0\16\14\1\u0163\12\14\27\0"
            + "\2\14\7\0\7\14\3\0\2\14\1\u0164\26\14\27\0"
            + "\2\14\7\0\7\14\3\0\12\14\1\u0165\16\14\27\0"
            + "\2\14\7\0\7\14\3\0\16\14\1\u0166\12\14\27\0"
            + "\2\14\7\0\7\14\3\0\12\14\1\u0167\16\14\27\0"
            + "\2\14\7\0\7\14\3\0\5\14\1\u0168\23\14\27\0"
            + "\2\14\7\0\7\14\3\0\11\14\1\u0169\17\14\27\0"
            + "\2\14\7\0\7\14\3\0\26\14\1\u016a\2\14\27\0"
            + "\2\14\7\0\7\14\3\0\5\14\1\u016b\23\14\27\0"
            + "\2\14\7\0\7\14\3\0\12\14\1\u016c\16\14\27\0"
            + "\2\u014b\3\0\1\u011f\3\0\7\u014b\3\0\31\u014b\27\0"
            + "\1\u014e\1\u014c\3\0\1\107\1\u0121\1\u0122\1\0\2\u014c"
            + "\2\u014e\2\u014c\1\u014e\3\0\31\u014e\21\0\1\u014d\2\0"
            + "\13\u014d\1\u016d\64\u014d\6\0\2\u014e\1\u014f\2\0\1\107"
            + "\1\u0121\1\u0122\1\0\7\u014e\3\0\31\u014e\27\0\1\u016e"
            + "\12\0\2\u016e\2\0\1\u016e\3\0\31\u016e\35\0\1\u0150"
            + "\1\u0122\65\0\1\u0126\2\0\10\u0126\1\u016f\1\u0151\1\u0126"
            + "\1\u0151\64\u0126\6\0\2\u0152\4\0\1\u0129\1\360\1\0"
            + "\7\u0152\3\0\31\u0152\40\0\2\u0170\1\0\4\u0170\3\0"
            + "\1\u0170\1\0\2\u0170\1\0\1\u0170\6\0\2\u0170\45\0"
            + "\1\120\5\0\1\u0171\1\130\2\0\2\u0171\1\134\5\0"
            + "\1\134\55\0\2\14\7\0\7\14\3\0\6\14\1\u0172"
            + "\22\14\27\0\2\14\7\0\7\14\3\0\13\14\1\u0173"
            + "\15\14\27\0\2\14\7\0\7\14\3\0\14\14\1\u0174"
            + "\14\14\27\0\2\14\7\0\7\14\3\0\3\14\1\u0175"
            + "\25\14\27\0\2\14\7\0\7\14\3\0\5\14\1\u0176"
            + "\23\14\27\0\2\14\7\0\7\14\3\0\3\14\1\u0177"
            + "\25\14\27\0\2\14\7\0\7\14\3\0\3\14\1\u0178"
            + "\25\14\27\0\2\14\7\0\7\14\3\0\2\14\1\u0179"
            + "\26\14\27\0\2\14\7\0\7\14\3\0\10\14\1\u017a"
            + "\20\14\27\0\2\14\7\0\7\14\3\0\11\14\1\u017b"
            + "\17\14\27\0\2\14\7\0\7\14\3\0\5\14\1\u017c"
            + "\23\14\27\0\2\14\7\0\7\14\3\0\22\14\1\u017d"
            + "\6\14\27\0\2\14\7\0\7\14\3\0\7\14\1\u017e"
            + "\21\14\27\0\2\14\7\0\7\14\3\0\11\14\1\u017f"
            + "\17\14\27\0\2\14\7\0\7\14\3\0\2\14\1\u0180"
            + "\26\14\27\0\2\14\7\0\7\14\3\0\2\14\1\u0181"
            + "\26\14\27\0\2\14\7\0\7\14\3\0\11\14\1\u0182"
            + "\17\14\21\0\1\u014d\2\0\10\u014d\1\u0183\1\u016d\1\u014d"
            + "\1\u016d\64\u014d\6\0\2\u016e\4\0\1\u0150\1\u0122\1\0"
            + "\7\u016e\3\0\31\u016e\40\0\2\u0184\1\0\4\u0184\3\0"
            + "\1\u0184\1\0\2\u0184\1\0\1\u0184\6\0\2\u0184\45\0"
            + "\1\120\5\0\1\u0185\1\130\2\0\2\u0185\1\134\5\0"
            + "\1\134\55\0\2\14\7\0\7\14\3\0\2\14\1\u0186"
            + "\26\14\27\0\2\14\7\0\7\14\3\0\2\14\1\u0187"
            + "\26\14\27\0\2\14\7\0\7\14\3\0\5\14\1\u0188"
            + "\23\14\27\0\2\14\7\0\7\14\3\0\2\14\1\u0189"
            + "\26\14\27\0\2\14\7\0\7\14\3\0\16\14\1\u018a"
            + "\12\14\27\0\2\14\7\0\7\14\3\0\5\14\1\u018b"
            + "\23\14\27\0\2\14\7\0\7\14\3\0\10\14\1\u018c"
            + "\20\14\27\0\2\14\7\0\7\14\3\0\2\14\1\u018d"
            + "\26\14\27\0\2\14\7\0\7\14\3\0\10\14\1\u018e"
            + "\20\14\27\0\2\14\7\0\7\14\3\0\2\14\1\u018f"
            + "\26\14\27\0\2\14\7\0\7\14\3\0\22\14\1\u0190"
            + "\6\14\40\0\2\u0191\1\0\4\u0191\3\0\1\u0191\1\0"
            + "\2\u0191\1\0\1\u0191\6\0\2\u0191\45\0\1\120\5\0"
            + "\1\u0192\1\130\2\0\2\u0192\1\134\5\0\1\134\55\0"
            + "\2\14\7\0\7\14\3\0\2\14\1\u0193\26\14\27\0"
            + "\2\14\7\0\7\14\3\0\7\14\1\u0194\21\14\27\0"
            + "\2\14\7\0\7\14\3\0\2\14\1\u0195\26\14\27\0"
            + "\2\14\7\0\7\14\3\0\11\14\1\u0196\17\14\27\0"
            + "\2\14\7\0\7\14\3\0\14\14\1\u0197\14\14\27\0"
            + "\2\14\7\0\7\14\3\0\14\14\1\u0198\14\14\40\0"
            + "\2\u0199\1\0\4\u0199\3\0\1\u0199\1\0\2\u0199\1\0"
            + "\1\u0199\6\0\2\u0199\45\0\1\120\5\0\1\u019a\1\130"
            + "\2\0\2\u019a\1\134\5\0\1\134\55\0\2\14\7\0"
            + "\7\14\3\0\15\14\1\u019b\13\14\27\0\2\14\7\0"
            + "\7\14\3\0\6\14\1\u019c\22\14\32\0\1\120\5\0"
            + "\1\u019d\1\130\2\0\2\u019d\1\134\5\0\1\134\60\0"
            + "\1\120\5\0\1\u019e\1\130\2\0\2\u019e\1\134\5\0"
            + "\1\134\60\0\1\120\5\0\1\u019f\1\130\2\0\2\u019f"
            + "\1\134\5\0\1\134\60\0\1\120\5\0\1\u01a0\1\130"
            + "\2\0\2\u01a0\1\134\5\0\1\134\60\0\1\120\5\0"
            + "\1\u01a1\1\130\2\0\2\u01a1\1\134\5\0\1\134\60\0"
            + "\1\120\5\0\1\u01a2\1\130\2\0\2\u01a2\1\134\5\0"
            + "\1\134\47\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[20435];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */

        int j = offset;  /* index in unpacked array */

        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
        "Unkown internal scanner error",
        "Error: could not match input",
        "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0
            = "\5\0\1\11\1\1\1\11\11\1\1\11\3\1\1\11"
            + "\23\1\10\11\1\1\2\11\5\1\1\11\2\1\2\11"
            + "\3\1\1\11\2\1\1\11\1\1\1\11\2\1\1\0"
            + "\3\11\2\0\1\1\1\0\1\1\1\11\1\1\1\11"
            + "\3\1\1\0\2\1\1\0\2\11\54\1\12\11\2\1"
            + "\7\11\6\0\1\1\1\11\2\0\1\11\3\0\1\11"
            + "\1\0\1\11\1\1\2\11\4\1\1\0\55\1\2\11"
            + "\7\0\1\11\5\0\1\11\52\1\1\0\1\11\12\0"
            + "\41\1\10\0\32\1\2\0\52\1\1\11\11\1";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[418];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;       /* index in packed string  */

        int j = offset;  /* index in unpacked array */

        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is the source of
     * the yytext() string
     */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read from
     * input
     */
    private int zzEndRead;

    /**
     * number of newlines encountered up to the start of the matched text
     */
    private int yyline;

    /**
     * the number of characters up to the start of the matched text
     */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF;

    /**
     * denotes if the user-EOF-code has already been executed
     */
    private boolean zzEOFDone;

    /* user code: */
    StringBuffer string = new StringBuffer();

    private static String xmlTagName = "";

    public int yychar() {
        return yychar;
    }

    private Stack<ParsedSymbol> pushedBack = new Stack<ParsedSymbol>();

    public int yyline() {
        return yyline + 1;
    }
    private List<LexListener> listeners = new ArrayList<>();

    public void addListener(LexListener listener) {
        listeners.add(listener);
    }

    public void removeListener(LexListener listener) {
        listeners.remove(listener);
    }

    public void informListenersLex(ParsedSymbol s) {
        for (LexListener l : listeners) {
            l.onLex(s);
        }
    }

    public void informListenersPushBack(ParsedSymbol s) {
        for (LexListener l : listeners) {
            l.onPushBack(s);
        }
    }

    public void pushback(ParsedSymbol symb) {
        pushedBack.push(symb);
        last = null;
        informListenersPushBack(symb);
    }
    ParsedSymbol last;

    public ParsedSymbol lex() throws java.io.IOException, ParseException {
        ParsedSymbol ret = null;
        if (!pushedBack.isEmpty()) {
            ret = last = pushedBack.pop();
        } else {
            ret = last = yylex();
        }
        informListenersLex(ret);
        return ret;
    }

    /**
     * Creates a new scanner There is also a java.io.InputStream version of this
     * constructor.
     *
     * @param in the java.io.Reader to read input from.
     */
    public ActionScriptLexer(java.io.Reader in) {
        this.zzReader = in;
    }

    /**
     * Creates a new scanner. There is also java.io.Reader version of this
     * constructor.
     *
     * @param in the java.io.Inputstream to read input from.
     */
    public ActionScriptLexer(java.io.InputStream in) {
        this(new java.io.InputStreamReader(in));
    }

    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x10000];
        int i = 0;  /* index in packed string  */

        int j = 0;  /* index in unpacked array */

        while (i < 2236) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do {
                map[j++] = value;
            } while (--count > 0);
        }
        return map;
    }

    /**
     * Refills the input buffer.
     *
     * @return      <code>false</code>, iff there was new input.
     *
     * @exception java.io.IOException if any I/O-Error occurs
     */
    private boolean zzRefill() throws java.io.IOException {

        /* first: make room (if you can) */
        if (zzStartRead > 0) {
            System.arraycopy(zzBuffer, zzStartRead,
                    zzBuffer, 0,
                    zzEndRead - zzStartRead);

            /* translate stored positions */
            zzEndRead -= zzStartRead;
            zzCurrentPos -= zzStartRead;
            zzMarkedPos -= zzStartRead;
            zzStartRead = 0;
        }

        /* is the buffer big enough? */
        if (zzCurrentPos >= zzBuffer.length) {
            /* if not: blow it up */
            char newBuffer[] = new char[zzCurrentPos * 2];
            System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
            zzBuffer = newBuffer;
        }

        /* finally: fill the buffer with new input */
        int numRead = zzReader.read(zzBuffer, zzEndRead,
                zzBuffer.length - zzEndRead);

        if (numRead > 0) {
            zzEndRead += numRead;
            return false;
        }
        // unlikely but not impossible: read 0 characters, but not at end of stream    
        if (numRead == 0) {
            int c = zzReader.read();
            if (c == -1) {
                return true;
            } else {
                zzBuffer[zzEndRead++] = (char) c;
                return false;
            }
        }

        // numRead < 0
        return true;
    }

    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;            /* indicate end of file */

        zzEndRead = zzStartRead;  /* invalidate buffer    */

        if (zzReader != null) {
            zzReader.close();
        }
    }

    /**
     * Resets the scanner to read from a new input stream. Does not close the
     * old reader.
     *
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost). Lexical
     * state is set to <tt>ZZ_INITIAL</tt>.
     *
     * @param reader the new input stream
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
        zzEOFDone = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = YYINITIAL;
    }

    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }

    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }

    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return new String(zzBuffer, zzStartRead, zzMarkedPos - zzStartRead);
    }

    /**
     * Returns the character at position <tt>pos</tt> from the matched text.
     *
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch. A value from 0 to
     * yylength()-1.
     *
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return zzBuffer[zzStartRead + pos];
    }

    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return zzMarkedPos - zzStartRead;
    }

    /**
     * Reports an error that occured while scanning.
     *
     * In a wellformed scanner (no or only correct usage of yypushback(int) and
     * a match-all fallback rule) this method will only be called with things
     * that "Can't Possibly Happen". If this method is called, something is
     * seriously wrong (e.g. a JFlex bug producing a faulty scanner etc.).
     *
     * Usual syntax/scanner level error handling should be done in error
     * fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }

    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again. This number must
     * not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength()) {
            zzScanError(ZZ_PUSHBACK_2BIG);
        }

        zzMarkedPos -= number;
    }

    /**
     * Resumes scanning until the next regular expression is matched, the end of
     * input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @exception java.io.IOException if any I/O-Error occurs
     */
    public ParsedSymbol yylex() throws java.io.IOException, ParseException {
        int zzInput;
        int zzAction;

        // cached fields:
        int zzCurrentPosL;
        int zzMarkedPosL;
        int zzEndReadL = zzEndRead;
        char[] zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            zzMarkedPosL = zzMarkedPos;

            yychar += zzMarkedPosL - zzStartRead;

            zzAction = -1;

            zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            zzForAction:
            {
                while (true) {

                    if (zzCurrentPosL < zzEndReadL) {
                        zzInput = zzBufferL[zzCurrentPosL++];
                    } else if (zzAtEOF) {
                        zzInput = YYEOF;
                        break zzForAction;
                    } else {
                        // store back cached positions
                        zzCurrentPos = zzCurrentPosL;
                        zzMarkedPos = zzMarkedPosL;
                        boolean eof = zzRefill();
                        // get translated positions and possibly new buffer
                        zzCurrentPosL = zzCurrentPos;
                        zzMarkedPosL = zzMarkedPos;
                        zzBufferL = zzBuffer;
                        zzEndReadL = zzEndRead;
                        if (eof) {
                            zzInput = YYEOF;
                            break zzForAction;
                        } else {
                            zzInput = zzBufferL[zzCurrentPosL++];
                        }
                    }
                    int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) {
                        break zzForAction;
                    }
                    zzState = zzNext;

                    int zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        zzMarkedPosL = zzCurrentPosL;
                        if ((zzAttributes & 8) == 8) {
                            break zzForAction;
                        }
                    }

                }
            }

            // store back cached position
            zzMarkedPos = zzMarkedPosL;

            switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                case 27: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.BITAND, yytext());
                }
                case 133:
                    break;
                case 58: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.ASSIGN_BITOR, yytext());
                }
                case 134:
                    break;
                case 60: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.ASSIGN_PLUS, yytext());
                }
                case 135:
                    break;
                case 105: {
                    return new ParsedSymbol(SymbolGroup.KEYWORD, SymbolType.SUPER, yytext());
                }
                case 136:
                    break;
                case 109: {
                    return new ParsedSymbol(SymbolGroup.KEYWORD, SymbolType.RETURN, yytext());
                }
                case 137:
                    break;
                case 20: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.BRACKET_OPEN, yytext());
                }
                case 138:
                    break;
                case 42: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.SHIFT_LEFT, yytext());
                }
                case 139:
                    break;
                case 11: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.ASSIGN, yytext());
                }
                case 140:
                    break;
                case 100: {
                    string.append(yytext());
                    String endtagname = yytext();
                    endtagname = endtagname.substring(2, endtagname.length() - 1);
                    if (endtagname.equals(xmlTagName)) {
                        yybegin(YYINITIAL);
                        return new ParsedSymbol(SymbolGroup.XML, SymbolType.XML, string.toString());
                    }
                }
                case 141:
                    break;
                case 51: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.IS, yytext());
                }
                case 142:
                    break;
                case 84: {
                    return new ParsedSymbol(SymbolGroup.KEYWORD, SymbolType.USE, yytext());
                }
                case 143:
                    break;
                case 5: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.MULTIPLY, yytext());
                }
                case 144:
                    break;
                case 131: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.INSTANCEOF, yytext());
                }
                case 145:
                    break;
                case 52: {
                    return new ParsedSymbol(SymbolGroup.KEYWORD, SymbolType.IN, yytext());
                }
                case 146:
                    break;
                case 125: {
                    return new ParsedSymbol(SymbolGroup.KEYWORD, SymbolType.FUNCTION, yytext());
                }
                case 147:
                    break;
                case 120: {
                    return new ParsedSymbol(SymbolGroup.KEYWORD, SymbolType.PRIVATE, yytext());
                }
                case 148:
                    break;
                case 22: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.SEMICOLON, yytext());
                }
                case 149:
                    break;
                case 99: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.VOID, yytext());
                }
                case 150:
                    break;
                case 85: {
                    return new ParsedSymbol(SymbolGroup.KEYWORD, SymbolType.FOR, yytext());
                }
                case 151:
                    break;
                case 3: { /*ignore*/

                }
                case 152:
                    break;
                case 123: {
                    return new ParsedSymbol(SymbolGroup.KEYWORD, SymbolType.OVERRIDE, yytext());
                }
                case 153:
                    break;
                case 72: {
                    string.append('\t');
                }
                case 154:
                    break;
                case 66: {
                    char val = (char) Integer.parseInt(yytext().substring(1), 8);
                    string.append(val);
                }
                case 155:
                    break;
                case 132: {
                    return new ParsedSymbol(SymbolGroup.KEYWORD, SymbolType.IMPLEMENTS, yytext());
                }
                case 156:
                    break;
                case 49: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.DECREMENT, yytext());
                }
                case 157:
                    break;
                case 18: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.CURLY_OPEN, yytext());
                }
                case 158:
                    break;
                case 64: {
                    throw new ParseException("Illegal escape sequence \"" + yytext() + "\"", yyline + 1);
                }
                case 159:
                    break;
                case 59: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.OR, yytext());
                }
                case 160:
                    break;
                case 10: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.GREATER_THAN, yytext());
                }
                case 161:
                    break;
                case 34: {
                    yybegin(YYINITIAL);
                    yyline++;
                }
                case 162:
                    break;
                case 106: {
                    return new ParsedSymbol(SymbolGroup.KEYWORD, SymbolType.THROW, yytext());
                }
                case 163:
                    break;
                case 98: {
                    return new ParsedSymbol(SymbolGroup.KEYWORD, SymbolType.WITH, yytext());
                }
                case 164:
                    break;
                case 75: {
                    string.setLength(0);
                    yybegin(XML);
                    String s = yytext();
                    s = s.substring(1, s.length() - 1);
                    if (s.contains(" ")) {
                        s = s.substring(0, s.indexOf(" "));
                    }
                    xmlTagName = s;
                    string.append(yytext());
                }
                case 165:
                    break;
                case 13: {
                    return new ParsedSymbol(SymbolGroup.INTEGER, SymbolType.INTEGER, new Long(Long.parseLong((yytext()))));
                }
                case 166:
                    break;
                case 15: {
                    string.setLength(0);
                    yybegin(CHARLITERAL);
                }
                case 167:
                    break;
                case 54: {
                    return new ParsedSymbol(SymbolGroup.KEYWORD, SymbolType.DO, yytext());
                }
                case 168:
                    break;
                case 53: {
                    return new ParsedSymbol(SymbolGroup.KEYWORD, SymbolType.IF, yytext());
                }
                case 169:
                    break;
                case 81: {
                    return new ParsedSymbol(SymbolGroup.KEYWORD, SymbolType.SET, yytext());
                }
                case 170:
                    break;
                case 29: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.PLUS, yytext());
                }
                case 171:
                    break;
                case 21: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.BRACKET_CLOSE, yytext());
                }
                case 172:
                    break;
                case 103: {
                    return new ParsedSymbol(SymbolGroup.KEYWORD, SymbolType.CONST, yytext());
                }
                case 173:
                    break;
                case 71: {
                    string.append('\n');
                }
                case 174:
                    break;
                case 76: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.ASSIGN_SHIFT_LEFT, yytext());
                }
                case 175:
                    break;
                case 43: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.LOWER_EQUAL, yytext());
                }
                case 176:
                    break;
                case 56: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.ASSIGN_BITAND, yytext());
                }
                case 177:
                    break;
                case 41: {
                    return new ParsedSymbol(SymbolGroup.DOUBLE, SymbolType.DOUBLE, new Double(Double.parseDouble((yytext()))));
                }
                case 178:
                    break;
                case 87: {
                    return new ParsedSymbol(SymbolGroup.KEYWORD, SymbolType.GET, yytext());
                }
                case 179:
                    break;
                case 35: {
                    yybegin(YYINITIAL);
                    // length also includes the trailing quote
                    return new ParsedSymbol(SymbolGroup.STRING, SymbolType.STRING, string.toString());
                }
                case 180:
                    break;
                case 130: {
                    return new ParsedSymbol(SymbolGroup.KEYWORD, SymbolType.PROTECTED, yytext());
                }
                case 181:
                    break;
                case 114: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.DELETE, yytext());
                }
                case 182:
                    break;
                case 94: {
                    return new ParsedSymbol(SymbolGroup.KEYWORD, SymbolType.CASE, yytext());
                }
                case 183:
                    break;
                case 89: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.STRICT_NOT_EQUAL, yytext());
                }
                case 184:
                    break;
                case 107: {
                    return new ParsedSymbol(SymbolGroup.KEYWORD, SymbolType.FALSE, yytext());
                }
                case 185:
                    break;
                case 4: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.DIVIDE, yytext());
                }
                case 186:
                    break;
                case 40: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.NAMESPACE_OP, yytext());
                }
                case 187:
                    break;
                case 17: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.PARENT_CLOSE, yytext());
                }
                case 188:
                    break;
                case 31: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.MODULO, yytext());
                }
                case 189:
                    break;
                case 118: {
                    return new ParsedSymbol(SymbolGroup.KEYWORD, SymbolType.DYNAMIC, yytext());
                }
                case 190:
                    break;
                case 93: {
                    return new ParsedSymbol(SymbolGroup.KEYWORD, SymbolType.ELSE, yytext());
                }
                case 191:
                    break;
                case 79: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.STRICT_EQUALS, yytext());
                }
                case 192:
                    break;
                case 88: {
                    return new ParsedSymbol(SymbolGroup.GLOBALCONST, SymbolType.NAN, yytext());
                }
                case 193:
                    break;
                case 126: {
                    return new ParsedSymbol(SymbolGroup.GLOBALCONST, SymbolType.INFINITY, yytext());
                }
                case 194:
                    break;
                case 116: {
                    return new ParsedSymbol(SymbolGroup.KEYWORD, SymbolType.EXTENDS, yytext());
                }
                case 195:
                    break;
                case 110: {
                    return new ParsedSymbol(SymbolGroup.KEYWORD, SymbolType.STATIC, yytext());
                }
                case 196:
                    break;
                case 14: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.MINUS, yytext());
                }
                case 197:
                    break;
                case 82: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.NEW, yytext());
                }
                case 198:
                    break;
                case 19: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.CURLY_CLOSE, yytext());
                }
                case 199:
                    break;
                case 92: {
                    return new ParsedSymbol(SymbolGroup.KEYWORD, SymbolType.EACH, yytext());
                }
                case 200:
                    break;
                case 28: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.BITOR, yytext());
                }
                case 201:
                    break;
                case 113: {
                    return new ParsedSymbol(SymbolGroup.KEYWORD, SymbolType.IMPORT, yytext());
                }
                case 202:
                    break;
                case 70: {
                    string.append('\r');
                }
                case 203:
                    break;
                case 26: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.TERNAR, yytext());
                }
                case 204:
                    break;
                case 2: {
                    yyline++;
                }
                case 205:
                    break;
                case 86: {
                    return new ParsedSymbol(SymbolGroup.KEYWORD, SymbolType.VAR, yytext());
                }
                case 206:
                    break;
                case 69: {
                    string.append('\b');
                }
                case 207:
                    break;
                case 83: {
                    return new ParsedSymbol(SymbolGroup.KEYWORD, SymbolType.TRY, yytext());
                }
                case 208:
                    break;
                case 46: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.EQUALS, yytext());
                }
                case 209:
                    break;
                case 62: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.ASSIGN_XOR, yytext());
                }
                case 210:
                    break;
                case 102: {
                    return new ParsedSymbol(SymbolGroup.KEYWORD, SymbolType.CATCH, yytext());
                }
                case 211:
                    break;
                case 65: {
                    string.append('\"');
                }
                case 212:
                    break;
                case 8: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.DOT, yytext());
                }
                case 213:
                    break;
                case 30: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.XOR, yytext());
                }
                case 214:
                    break;
                case 9: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.LOWER_THAN, yytext());
                }
                case 215:
                    break;
                case 78: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.ASSIGN_SHIFT_RIGHT, yytext());
                }
                case 216:
                    break;
                case 50: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.AS, yytext());
                }
                case 217:
                    break;
                case 68: {
                    string.append('\'');
                }
                case 218:
                    break;
                case 67: {
                    string.append('\\');
                }
                case 219:
                    break;
                case 129: {
                    return new ParsedSymbol(SymbolGroup.GLOBALCONST, SymbolType.UNDEFINED, yytext());
                }
                case 220:
                    break;
                case 128: {
                    return new ParsedSymbol(SymbolGroup.KEYWORD, SymbolType.INTERFACE, yytext());
                }
                case 221:
                    break;
                case 115: {
                    return new ParsedSymbol(SymbolGroup.KEYWORD, SymbolType.PUBLIC, yytext());
                }
                case 222:
                    break;
                case 108: {
                    return new ParsedSymbol(SymbolGroup.KEYWORD, SymbolType.WHILE, yytext());
                }
                case 223:
                    break;
                case 38: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.ASSIGN_DIVIDE, yytext());
                }
                case 224:
                    break;
                case 121: {
                    return new ParsedSymbol(SymbolGroup.KEYWORD, SymbolType.PACKAGE, yytext());
                }
                case 225:
                    break;
                case 112: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.TYPEOF, yytext());
                }
                case 226:
                    break;
                case 63: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.ASSIGN_MODULO, yytext());
                }
                case 227:
                    break;
                case 111: {
                    return new ParsedSymbol(SymbolGroup.KEYWORD, SymbolType.SWITCH, yytext());
                }
                case 228:
                    break;
                case 77: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.USHIFT_RIGHT, yytext());
                }
                case 229:
                    break;
                case 124: {
                    return new ParsedSymbol(SymbolGroup.KEYWORD, SymbolType.INTERNAL, yytext());
                }
                case 230:
                    break;
                case 37: {
                    yybegin(XML);
                    string.append(yytext());
                }
                case 231:
                    break;
                case 117: {
                    return new ParsedSymbol(SymbolGroup.KEYWORD, SymbolType.DEFAULT, yytext());
                }
                case 232:
                    break;
                case 32: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.ATTRIBUTE, yytext());
                }
                case 233:
                    break;
                case 16: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.PARENT_OPEN, yytext());
                }
                case 234:
                    break;
                case 44: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.SHIFT_RIGHT, yytext());
                }
                case 235:
                    break;
                case 104: {
                    return new ParsedSymbol(SymbolGroup.KEYWORD, SymbolType.CLASS, yytext());
                }
                case 236:
                    break;
                case 73: {
                    string.append('\f');
                }
                case 237:
                    break;
                case 91: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.ASSIGN_USHIFT_RIGHT, yytext());
                }
                case 238:
                    break;
                case 39: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.ASSIGN_MULTIPLY, yytext());
                }
                case 239:
                    break;
                case 80: {
                    return new ParsedSymbol(SymbolGroup.INTEGER, SymbolType.INTEGER, new Long(Long.parseLong(yytext().substring(2), 16)));
                }
                case 240:
                    break;
                case 96: {
                    return new ParsedSymbol(SymbolGroup.KEYWORD, SymbolType.TRUE, yytext());
                }
                case 241:
                    break;
                case 23: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.COMMA, yytext());
                }
                case 242:
                    break;
                case 74: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.REST, yytext());
                }
                case 243:
                    break;
                case 61: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.INCREMENT, yytext());
                }
                case 244:
                    break;
                case 47: {
                    return new ParsedSymbol(SymbolGroup.INTEGER, SymbolType.INTEGER, new Long(Long.parseLong(yytext(), 8)));
                }
                case 245:
                    break;
                case 95: {
                    return new ParsedSymbol(SymbolGroup.GLOBALCONST, SymbolType.NULL, yytext());
                }
                case 246:
                    break;
                case 33: {
                    string.append(yytext());
                }
                case 247:
                    break;
                case 12: {
                    string.setLength(0);
                    yybegin(STRING);
                }
                case 248:
                    break;
                case 101: {
                    return new ParsedSymbol(SymbolGroup.KEYWORD, SymbolType.BREAK, yytext());
                }
                case 249:
                    break;
                case 57: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.AND, yytext());
                }
                case 250:
                    break;
                case 7: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.COLON, yytext());
                }
                case 251:
                    break;
                case 127: {
                    return new ParsedSymbol(SymbolGroup.KEYWORD, SymbolType.NAMESPACE, yytext());
                }
                case 252:
                    break;
                case 122: {
                    return new ParsedSymbol(SymbolGroup.KEYWORD, SymbolType.CONTINUE, yytext());
                }
                case 253:
                    break;
                case 6: {
                    return new ParsedSymbol(SymbolGroup.IDENTIFIER, SymbolType.IDENTIFIER, yytext());
                }
                case 254:
                    break;
                case 119: {
                    return new ParsedSymbol(SymbolGroup.KEYWORD, SymbolType.FINALLY, yytext());
                }
                case 255:
                    break;
                case 90: {
                    String t = yytext();
                    return new ParsedSymbol(SymbolGroup.TYPENAME, SymbolType.TYPENAME, t.substring(2, t.length() - 1));
                }
                case 256:
                    break;
                case 24: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.NOT, yytext());
                }
                case 257:
                    break;
                case 25: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.NEGATE, yytext());
                }
                case 258:
                    break;
                case 45: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.GREATER_EQUAL, yytext());
                }
                case 259:
                    break;
                case 48: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.ASSIGN_MINUS, yytext());
                }
                case 260:
                    break;
                case 55: {
                    return new ParsedSymbol(SymbolGroup.OPERATOR, SymbolType.NOT_EQUAL, yytext());
                }
                case 261:
                    break;
                case 36: {
                    string.append(yytext());
                    yyline++;
                }
                case 262:
                    break;
                case 97: {
                    return new ParsedSymbol(SymbolGroup.KEYWORD, SymbolType.THIS, yytext());
                }
                case 263:
                    break;
                case 1: {
                }
                case 264:
                    break;
                default:
                    if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
                        zzAtEOF = true;
                        {
                            return new ParsedSymbol(SymbolGroup.EOF, SymbolType.EOF, null);
                        }
                    } else {
                        zzScanError(ZZ_NO_MATCH);
                    }
            }
        }
    }

}
