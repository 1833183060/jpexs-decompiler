<?xml version="1.0" encoding="UTF-8"?>
<project name="common build script" default="all" basedir="." xmlns:jacoco="antlib:org.jacoco.ant">
    <description>Builds project</description>      
    
    <taskdef name="mkbom" classname="com.jpexs.jbomutils.ant.MkBomTask" classpath="${basedir}/jbomutils.jar" />                
    <taskdef name="xar" classname="com.jpexs.xar.ant.XarTask" classpath="${basedir}/jxar_1.1.0.jar" />
    
    <property name="DISTLIBRARIESFULLDIR" value="${DISTRIBUTIONDIR}/${DISTLIBRARIESDIRNAME}"/>    
    <patternset id="compiler.resources">
        <include name="**/?*.properties"/>  
        <include name="**/?*.colorschemes"/>                
        <include name="**/?*.bin"/>
        <include name="**/?*.xml"/>
        <include name="**/?*.txt"/>
        <include name="**/?*.gif"/>
        <include name="**/?*.png"/>
        <include name="**/?*.jpeg"/>
        <include name="**/?*.jpg"/>
        <include name="**/?*.html"/>
        <include name="**/?*.dtd"/>
        <include name="**/?*.tld"/>
        <include name="**/?*.mid"/>
        <include name="**/?*.wav"/>
        <include name="**/?*.js"/>
        <include name="**/?*.swf"/>
    </patternset>
    
    <taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
        <classpath path="${TESTLIBDIR}/jacocoant.jar"/>
    </taskdef>    
    
    <taskdef name="cpio" classname="org.apache.ant.compress.taskdefs.Cpio" classpath="${basedir}/ant-compress-1.4.jar;${basedir}/commons-compress-1.9.jar" />
    
    <path id="ant-deb.classpath">
        <pathelement location="${basedir}/ant-deb-0.0.1.jar"/>
    </path>
    
    <taskdef name="deb" classname="com.googlecode.ant_deb_task.Deb" classpathref="ant-deb.classpath"/>
    <taskdef name="desktopentry" classname="com.googlecode.ant_deb_task.DesktopEntry" classpathref="ant-deb.classpath"/>

    <target name="-loadversion" depends="-loadversion-prop,-loadversion-private">
        
    </target>
    <target name="-loadversion-private" unless="newversion.type">
        <property name="version.major" value="0" />
        <property name="version.minor" value="0" />
        <property name="version.release" value="0" />
        <property name="version.major" value="0" />
        <property name="version.build" value="0" />
        <!-- <property name="version.revision" value="" /> -->
        <property name="version.debug" value="true" />
        
        <property name="VERSION" value="${version.major}.${version.minor}.${version.release}" />
        <property name="VERSIONNUMBER" value="${version.major}.${version.minor}.${version.release}.${version.build}" />  
        <property name="PRIVATE" value="true" />        
    </target>
    <target name="-loadversion-prop" if="newversion.type">
        <loadproperties srcfile="version.properties" prefix="version"/> 
        <property name="VERSION" value="${version.major}.${version.minor}.${version.release}" />
        <property name="VERSIONNUMBER" value="${version.major}.${version.minor}.${version.release}.${version.build}" />  
        <script language="javascript">
            if(project.getProperty("version.debug")=="true"){
            project.setProperty("NIGHTLY",true);
            }
        </script>
        <echo level="info" message="Loaded Version:${version.major}.${version.minor}.${version.release}.${version.build}"/>
    </target>
    
 

    <target name="compile" depends="build_lib">
        <!--<delete dir="${COMPILEDIR}"/>-->        
        <mkdir dir="${COMPILEDIR}"/>
        <javac srcdir="${SOURCEDIR}" destdir="${COMPILEDIR}" includes="**/*.java" target="${TARGETJAVA}" source="${TARGETJAVA}" debug="true"
               debuglevel="lines,vars,source" includeantruntime="false" encoding="utf-8">
            <compilerarg line="-Xlint:unchecked"/> <!-- For Java 8: -Xdiags:verbose -->
            <classpath>
                <fileset dir="${LIBRARIESDIR}" includes="**/*.jar"/>
            </classpath>
        </javac>
        <copy todir="${COMPILEDIR}">
            <fileset dir="${SOURCEDIR}">
                <patternset refid="compiler.resources"/>
                <type type="file"/>
            </fileset>
        </copy>
    </target>
    
    <target name="compile_lib">
        <ant antfile="${CORELIBSCRIPT}" target="compile" inheritAll="false" usenativebasedir="true" />
    </target>
    
    <target name="compile-tests">
        <delete dir="${COMPILETESTSDIR}"/>
        <mkdir dir="${COMPILETESTSDIR}"/>
        <javac srcdir="${TESTDIR}" destdir="${COMPILETESTSDIR}" includes="**/*.java" target="${TARGETJAVA}" source="${TARGETJAVA}" debug="true" includeantruntime="false" encoding="utf-8">                        
            <classpath>
                <pathelement path="${COMPILEDIR}"/>
                <fileset dir="${LIBRARIESDIR}" includes="**/*.jar"/>
                <fileset dir="${TESTLIBDIR}" includes="**/*.jar"/>
            </classpath>
        </javac>
    </target>

    <target name="-test-halt-newver" if="NEWVER">
        <property name="TESTHALTFAILURE" value="true" />
    </target>
    <target name="-test-halt-nonewver" unless="NEWVER">
        <property name="TESTHALTFAILURE" value="false" />
    </target>

    <target name="test" depends="-test-halt-newver,-test-halt-nonewver,test_lib,compile,compile-tests">
        <delete dir="${TESTRESULTSDIR}"/>
        <mkdir dir="${TESTRESULTSDIR}"/>
        <mkdir dir="${TESTRESULTSDIR}/raw/"/>
        
         
        <taskdef classname="org.testng.TestNGAntTask" classpath="${TESTLIBDIR}/testng-6.8.jar" name="testng" />
    
        <mkdir dir="${COVERAGEDIR}" />
        <jacoco:coverage destfile="${COVERAGEDIR}/jacoco.exec">
            <testng 
                outputDir="${TESTRESULTSDIR}"
                haltOnFailure="${TESTHALTFAILURE}" verbose="2" workingDir="${basedir}">
        
                <classpath>
                    <pathelement path="${COMPILETESTSDIR}"/>
                    <pathelement path="${INSTRDIR}"/>
                    <pathelement path="${COMPILEDIR}"/>
                    <fileset dir="${LIBRARIESDIR}" includes="**/*.jar"/>
                    <fileset dir="${TESTLIBDIR}" includes="**/*.jar"/>
                </classpath>
                <jvmarg value="-noverify" />
                <jvmarg value="-Demma.coverage.out.file=${COVERAGEDIR}/coverage.emma"/>
                <jvmarg value="-Demma.coverage.out.merge=true"/>
                <classfileset dir="${COMPILETESTSDIR}" includes="**/*.class" />                        
            
            </testng>  
        </jacoco:coverage>
                  
        <!-- Coverage report -->
        <mkdir dir="${COVERAGERESULTSDIR}"/>
        <jacoco:report>
            <executiondata>
                <file file="${COVERAGEDIR}/jacoco.exec" />
            </executiondata>
            <structure name="${PROJECTNAME}">
                <classfiles>
                    <fileset dir="${COMPILEDIR}" />
                </classfiles>
                <sourcefiles encoding="UTF-8">
                    <fileset dir="${SOURCEDIR}" />
                </sourcefiles>
            </structure>
            <html destdir="${COVERAGERESULTSDIR}" />
        </jacoco:report> 
    </target>
    
    <condition property="is_windows">
        <os family="windows"/>
    </condition>
    
    
    
    
    
    <target name="installer" depends="-loadversion,-load-tools,dist">
        <taskdef name="nsis" classname="com.danielreese.nsisant.Task">
            <classpath location="${basedir}/nsisant-1.3.jar" />
        </taskdef>
        <property name="exe.file" value="${RELEASESDIR}/${PREFIXFILENAME}_${VERSION}${VERSIONSUFFIX}_setup.exe"/>       
        <nsis script="installer.nsi" path="${nsis.path}" verbosity="2">
            <define name="APP_NAME" value="${PRODUCTNAME}"/>
            <define name="APP_VER" value="${VERSION}${VERSIONSUFFIX}"/>
            <define name="APP_VER_MAJOR" value="${version.major}"/>
            <define name="APP_VER_MINOR" value="${version.minor}"/>
            <define name="APP_PUBLISHER" value="${VENDOR}"/>
            <define name="APP_URL" value="${PRODUCTURL}"/>
            <define name="APP_SETUPFILE" value="${exe.file}" />
            <define name="JRE_VERSION" value="${TARGETJAVA}" />
        </nsis>
        <echo level="info" message="Setup created in ${exe.file}"/>
    </target>
    
    <target name="library" depends="-loadversion,build_lib">
        <mkdir dir="${RELEASESDIR}"/>
        <copy file="${CORELIBPATH}" tofile="${RELEASESDIR}/${PREFIXFILENAME}_${VERSION}${VERSIONSUFFIX}_lib.jar"/>
    </target>
    
    <target name="archive" depends="-loadversion,dist">
        <mkdir dir="${RELEASESDIR}"/>
        <property  name="zip.file" value="${RELEASESDIR}/${PREFIXFILENAME}_${VERSION}${VERSIONSUFFIX}.zip" />
        <zip destfile="${zip.file}" basedir="${DISTRIBUTIONDIR}" excludes="${app.script}">
            <zipfileset dir="${DISTRIBUTIONDIR}" includes="${app.script}" fullpath="${app.script}" filemode="755"/>
        </zip>
    </target>
    
    
    
    <target name="deb" depends="-loadversion,dist">
        <mkdir dir="${RELEASESDIR}"/>
        <tempfile property="app.deb.desktop.temp" deleteonexit="true" prefix="desktop"/>
        <desktopentry
            toFile="${app.deb.desktop.temp}"
            name="${PRODUCTNAME}"
            comment="${app.description.short}"
            exec="/usr/bin/${app.package}"
            icon="/usr/share/java/${app.package}/icon.png"
            categories="Development;Network;Utility;WebDevelopment;Java"
        />
        <deb 
            package="${app.package}"
            todir="${RELEASESDIR}"
            debFilenameProperty="deb.file.orig"
            section="editors"
            depends="${app.package.depends}">
            <version upstream="${VERSION}" />
            <maintainer name="${VENDOR}" email="${app.vendor.mail}"/>
            <description synopsis="${app.description.short}">${app.description}</description>
            <tarfileset dir="${DISTRIBUTIONDIR}" prefix="usr/share/java/${app.package}">
                <include name="**"/>
            </tarfileset>
            <tarfileset file="${DISTRIBUTIONDIR}/${app.script}" fullpath="usr/bin/${app.package}" filemode="755" />
            <tarfileset file="${app.deb.desktop.temp}" fullpath="usr/share/applications/${app.deb.desktop.file}.desktop"/>
        </deb>
        <property name="deb.file" value="${RELEASESDIR}/${PREFIXFILENAME}_${VERSION}${VERSIONSUFFIX}.deb" />        
        <move file="${deb.file.orig}" tofile="${deb.file}" />
        <delete file="${app.deb.desktop.temp}" />
    </target>   
    
    <target name="osx-app-installer" depends="osx-app-bundle">
        <mkdir dir="${app.installer.dir}/flat/base.pkg"/>
        <mkdir dir="${app.installer.dir}/flat/Resources/en.lproj"/>
        <mkdir dir="${app.installer.dir}/root/Applications"/>
        <copy todir="${app.installer.dir}/root/Applications/">
            <fileset dir="${app.bundle.dir}">
                <include  name="${app.osx.dir}.app/**" />
            </fileset>
        </copy>
        
        <tempfile deleteonexit="true" property="app.cpio.temp" prefix="cpio"/>
        
        <cpio destfile="${app.cpio.temp}" format="odc">
            <tarfileset dir="${app.installer.dir}/root" uid="0" gid="80" includes="Applications/${app.osx.dir}.app/Contents/MacOS/${app.osx.dir}"  filemode="755" />            
            <tarfileset dir="${app.installer.dir}/root" uid="0" gid="80">
                <exclude name="Applications/${app.osx.dir}.app/Contents/Resources/${app.script}" />
                <exclude name="Applications/${app.osx.dir}.app/Contents/MacOS/${app.osx.dir}" />
            </tarfileset>
            <tarfileset dir="${app.installer.dir}/root" uid="0" gid="80" includes="Applications/${app.osx.dir}.app/Contents/Resources/${app.script}" filemode="755" />        
        </cpio>
        <gzip src="${app.cpio.temp}" destfile="${app.installer.dir}/flat/base.pkg/Payload" />
        <delete file="${app.cpio.temp}" />
        <resourcecount property="app.installer.files.number">
            <fileset dir="${app.installer.dir}/root" />
        </resourcecount>
        <length property="app.installer.files.size.bytes">
            <fileset dir="${app.installer.dir}/root" />
        </length>
        
        <script language="javascript">
        <![CDATA[
            var length_bytes = project.getProperty("app.installer.files.size.bytes");
            var length_kbytes = Math.round((length_bytes / 1024) * Math.pow(10,2))
                              / Math.pow(10,2);            
            project.setNewProperty("app.installer.files.size.kilobytes", length_kbytes);
        ]]>
        </script>
        
        <echo file="${app.installer.dir}/flat/base.pkg/PackageInfo"><![CDATA[<pkg-info format-version="2" identifier="${MACBUNDLE}.base.pkg" version="${VERSION}${VERSIONSUFFIX}" install-location="/" auth="root">
  <payload installKBytes="${app.installer.files.size.kilobytes}" numberOfFiles="${app.installer.files.number}"/>
<bundle-version>
    <bundle id="${MACBUNDLE}" CFBundleIdentifier="${MACBUNDLE}" path="./Applications/${app.osx.dir}.app" CFBundleVersion="${VERSION}${VERSIONSUFFIX}"/>
</bundle-version>
</pkg-info>]]></echo>


        <mkbom destfile="${app.installer.dir}/flat/base.pkg/Bom">
            <bomfileset dir="${app.installer.dir}/root" uid="0" gid="80" includes="Applications/${app.osx.dir}.app/Contents/MacOS/${app.osx.dir}" filemode="755" />            
            <bomfileset dir="${app.installer.dir}/root" uid="0" gid="80">
                <exclude name="Applications/${app.osx.dir}.app/Contents/Resources/${app.script}" />
                <exclude name="Applications/${app.osx.dir}.app/Contents/MacOS/${app.osx.dir}" />
            </bomfileset>
            <bomfileset dir="${app.installer.dir}/root" uid="0" gid="80" includes="Applications/${app.osx.dir}.app/Contents/Resources/${app.script}" filemode="755" />  
        </mkbom>
        
        <echo file="${app.installer.dir}/flat/Distribution"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<installer-script minSpecVersion="1.000000" authoringTool="com.apple.PackageMaker" authoringToolVersion="3.0.3" authoringToolBuild="174">
    <title>${PRODUCTNAME} ${VERSION}${VERSIONSUFFIX}</title>
    <options customize="never" allow-external-scripts="no"/>
    <domains enable_anywhere="true"/>
    <installation-check script="pm_install_check();"/>
    <script>function pm_install_check() {
  if(!(system.compareVersions(system.version.ProductVersion,'10.5') >= 0)) {
    my.result.title = 'Failure';
    my.result.message = 'You need at least Mac OS X 10.5 to install ${PRODUCTNAME}';
    my.result.type = 'Fatal';
    return false;
  }
  return true;
}
</script>
    <choices-outline>
        <line choice="choice1"/>
    </choices-outline>
    <choice id="choice1" title="base">
        <pkg-ref id="${MACBUNDLE}.base.pkg"/>
    </choice>
    <pkg-ref id="${MACBUNDLE}.base.pkg" installKBytes="${app.installer.files.size.kilobytes}" version="${VERSION}${VERSIONSUFFIX}" auth="Root">#base.pkg</pkg-ref>
</installer-script>]]></echo>                       
       <property name="pkg.file" value="${RELEASESDIR}/${PREFIXFILENAME}_${VERSION}${VERSIONSUFFIX}.pkg"/> 
              
       <xar destfile="${pkg.file}" encoding="none">
           <tarfileset dir="${app.installer.dir}/flat" />
       </xar>                 
    </target>
    
    
    <target name="osx-app-bundle" depends="-loadversion,dist">
        <property name="app.script.temp" value="${app.bundle.dir}/${app.osx.dir}.app/Contents/MacOS/${app.osx.dir}"/>
        <echo file="${app.script.temp}">#!/bin/bash&#10;cd "$(dirname "$${BASH_SOURCE[0]}")"&#10;cd ../Resources&#10;./${app.script}</echo>
        <property name="app.info.temp" value="${app.bundle.dir}/${app.osx.dir}.app/Contents/Info.plist"/>
        <echo file="${app.info.temp}"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>CFBundleDisplayName</key>
	<string>${PRODUCTNAME}</string>
	<key>CFBundleExecutable</key>
	<string>FFDec</string>
	<key>CFBundleIconFile</key>
	<string>Icon.icns</string>
	<key>CFBundleIdentifier</key>
	<string>${MACBUNDLE}</string>
	<key>CFBundleInfoDictionaryVersion</key>
	<string>6.0</string>
	<key>CFBundleName</key>
	<string>FFDec</string>
	<key>CFBundlePackageType</key>
	<string>APPL</string>
	<key>CFBundleShortVersionString</key>
	<string>${VERSION}${VERSIONSUFFIX}</string>
	<key>CFBundleVersion</key>
	<string>${VERSION}${VERSIONSUFFIX}</string>
	<key>LSApplicationCategoryType</key>
	<string>${MACCATEGORYTYPE}</string>
</dict>
</plist>]]></echo>        
        <copy todir="${app.bundle.dir}/${app.osx.dir}.app/Contents/Resources/">
            <fileset dir="${DISTRIBUTIONDIR}" />
        </copy>                  
    </target>
    
    <target name="osx-app-archive" depends="osx-app-bundle">        
        <mkdir dir="${RELEASESDIR}"/>        
        <property  name="osx.zip.file" value="${RELEASESDIR}/${PREFIXFILENAME}_${VERSION}${VERSIONSUFFIX}_macosx.zip" />        
        <zip destfile="${osx.zip.file}">
            <zipfileset dir="${app.bundle.dir}" includes="${app.osx.dir}.app/Contents/MacOS/${app.osx.dir}"  filemode="755" />
            <zipfileset dir="${app.bundle.dir}">
                <exclude name="${app.osx.dir}.app/Contents/Resources/${app.script}" />
                <exclude name="${app.osx.dir}.app/Contents/MacOS/${app.osx.dir}" />
            </zipfileset>
            
            <zipfileset dir="${app.bundle.dir}" includes="${app.osx.dir}.app/Contents/Resources/${app.script}" filemode="755" />           
        </zip>           
    </target>
    
    <target name="-set-gui-type">
        <property name="EXETYPE" value="gui" />
    </target>
    <target name="-set-console-type">
        <property name="EXETYPE" value="console" />
    </target>
    <target name="-exe-config" depends="-loadversion"> 
        <echoxml file="${EXECONFIG}">
            <launch4jConfig>
                <dontWrapJar>true</dontWrapJar>
                <headerType>${EXETYPE}</headerType>
                <jar>${JARFILENAME}.jar</jar>
                <outfile>${DISTRIBUTIONDIR}/${EXEFILENAME}.exe</outfile>
                <errTitle></errTitle>
                <cmdLine></cmdLine>
                <chdir></chdir>
                <priority>normal</priority>
                <downloadUrl>http://java.com/download</downloadUrl>
                <supportUrl></supportUrl>
                <customProcName>false</customProcName>
                <stayAlive>false</stayAlive>
                <restartOnCrash>false</restartOnCrash>
                <manifest></manifest>
                <icon>${EXEICON}</icon>
                <jre>
                    <path></path>
                    <minVersion>${MINJAVAVERSION}</minVersion>
                    <maxVersion></maxVersion>
                    <jdkPreference>preferJre</jdkPreference>
                    <runtimeBits>64/32</runtimeBits>
                    <maxHeapPercent>${MAXHEAPSIZEPERCENT}</maxHeapPercent>
                    <opt>-Djava.net.preferIPv4Stack=true</opt>
                </jre>
                <splash>
                    <file>graphics/splash.bmp</file>
                    <waitForWindow>true</waitForWindow>
                    <timeout>60</timeout>
                    <timeoutErr>true</timeoutErr>
                </splash>
                <versionInfo>
                    <fileVersion>${VERSIONNUMBER}</fileVersion>
                    <txtFileVersion>${VERSION}${VERSIONSUFFIX}</txtFileVersion>
                    <fileDescription>${PRODUCTNAME}</fileDescription>
                    <copyright>${VENDOR}</copyright>
                    <productVersion>${VERSIONNUMBER}</productVersion>
                    <txtProductVersion>${VERSION}${VERSIONSUFFIX}</txtProductVersion>
                    <productName>${PRODUCTNAME}</productName>
                    <companyName></companyName>
                    <internalName>${INTERNALNAME}</internalName>
                    <originalFilename>${EXEFILENAME}.exe</originalFilename>
                </versionInfo>
            </launch4jConfig>
        </echoxml>
    </target>    
    <target name="-exe-linux" unless="is_windows" depends="-load-tools,-exe-config">
        <exec dir="${launch4j.path}" executable="${launch4j.path}/launch4j" failonerror="true">
            <arg file="${EXECONFIG}" />
        </exec>
    </target>
    <target name="-exe-windows" if="is_windows" depends="-load-tools,-exe-config">
        <exec dir="${launch4j.path}" executable="${launch4j.path}\launch4jc.exe" failonerror="true">
            <arg file="${EXECONFIG}" />
        </exec>
    </target>   
    <target name="exe" depends="-set-gui-type,-exe-linux,-exe-windows">
        
    </target>
    
    
    <target name="-check-tools">
        <available file="tools.properties" property="tools.config.exists"/>
    </target>
    
    <target name="-load-tools-ok" if="tools.config.exists">
        <loadproperties srcfile="tools.properties" />
    </target>
    
    <target name="-load-tools-fail" unless="tools.config.exists">
        <fail>
            tools.properties NOT found.
            Please create file named "tools.properties" and add two lines:
            nsis.path = Path to Nullsoft Install System
            launch4j.path = Path to launch4j
            
            WARNING: You must use double backslash in paths on Windows System or forward slash
        </fail>
    </target>
    
    <target name="-load-tools" depends="-check-tools,-load-tools-ok,-load-tools-fail">
        
    </target>
    <target name="exe-console" depends="-set-console-type,-exe-linux,-exe-windows">

    </target>

    <target name="release" depends="library,archive,deb,osx-app-archive,installer,osx-app-installer,locales">        

    </target>
         
    <target name="all" depends="clean,build,test,javadoc,release">    
        
    </target>                    
    
    <target name="-upload-fail" unless="upload.config.exists">
        <fail message="Cannot upload - Website properties file missing. Create file named jpexs_website.properties and put username=xxx, password=yyy lines in there" />             
    </target>
    
    <target name="-set-none-newversion" unless="newversion.type">
        <property name="newversion.type" value="none"/>
    </target>
    <target name="-check-version-online" depends="-set-none-newversion,git-tag">      
        <loadproperties srcfile="jpexs_website.properties" prefix="website"/>
        <echo level="info">Checking version online: ${newversion.type}...</echo>
        <!-- Note: You must have developer account to upload to JPEXS website -->
        <java jar="uploader.jar" fork="true" failonerror="true" outputproperty="newversion.prop">    
            <arg value="${website.version.url}" />                

            <arg value="-field" />
            <arg value="mode" />
            <arg value="commandline" />
            
            <arg value="-field" />
            <arg value="set_username" />
            <arg value="${website.username}" />

            <arg value="-field" />
            <arg value="set_password" />            
            <arg value="${website.password}" />  
            
            <arg value="-field" />
            <arg value="revision" />            
            <arg value="${GITTAG}" />
            
            <arg value="-field" />
            <arg value="new" />            
            <arg value="${newversion.type}" />
            
        </java>        
        <echo file="version.properties" message="${newversion.prop}" force=""/>
    </target>
    
    <target name="-upload-do" if="upload.config.exists">
        <loadproperties srcfile="jpexs_website.properties" prefix="website"/>
        <echo level="info">Uploading...</echo>
        <!-- Note: You must have developer account to upload to JPEXS website -->
        <java jar="uploader.jar" fork="true" failonerror="true">    
            <arg value="${website.upload.url}" />                

            <arg value="-field" />
            <arg value="mode" />
            <arg value="commandline" />
            
            <arg value="-field" />
            <arg value="set_username" />
            <arg value="${website.username}" />

            <arg value="-field" />
            <arg value="set_password" />            
            <arg value="${website.password}" />  
            
            <arg value="-${upload.form.new.type}" />
            <arg value="new" />            
            <arg value="${upload.form.new.value}" />
            
            <arg value="-${upload.form.fixed.type}" />
            <arg value="fixed" />            
            <arg value="${upload.form.fixed.value}" />

            <arg value="-file" />
            <arg value="fileExe" />
            <arg value="${exe.file}" />

            <arg value="-file" />
            <arg value="fileZip" />
            <arg value="${zip.file}" />
            
            <arg value="-file" />
            <arg value="fileOSXZip" />
            <arg value="${osx.zip.file}" />
            
            <arg value="-file" />
            <arg value="filePkg" />
            <arg value="${pkg.file}" />
            
            <arg value="-file" />
            <arg value="fileDeb" />
            <arg value="${deb.file}" />

            <arg value="-file" />
            <arg value="fileLang" />
            <arg value="${lang.file}" />
        </java>
    </target>
    
    
    <target name="-upload-check-config">
        <available file="jpexs_website.properties" property="upload.config.exists"/>
    </target>
    
    <!-- Prepare upload dialog to not show (no changes in nightly) -->
    <target name="-upload-check-nightly" if="NIGHTLY">
        <property name="upload.form.new.type" value="emptyfield" />
        <property name="upload.form.new.value" value="" />
        
        <property name="upload.form.fixed.type" value="emptyfield" />
        <property name="upload.form.fixed.value" value="" />
    </target>
    
    <!-- Prepare upload dialog to show -->
    <target name="-upload-check-stable" unless="NIGHTLY">
        <property name="upload.form.new.type" value="textarea" />
        <property name="upload.form.new.value" value="New:" />
        
        <property name="upload.form.fixed.type" value="textarea" />
        <property name="upload.form.fixed.value" value="Fixed:" />
    </target>
    
    <target name="-upload" depends="-upload-check-nightly,-upload-check-stable,-upload-check-config,-upload-do,-upload-fail">        
               
    </target>    
    
    <target name="dist" depends="build,exe">
        <copy todir="${DISTRIBUTIONDIR}">
            <fileset dir="${RESOURCESDIR}" includes="**/*.*"/>
        </copy>
    </target>
    
    <target name="locales" depends="-loadversion">
        <delete dir="${LOCALESTARGETDIR}"/>
        <mkdir dir="${LOCALESTARGETDIR}/${PROJECTNAME}"/>
        <copy todir="${LOCALESTARGETDIR}/${PROJECTNAME}">
            <fileset dir="${LOCALESDIR}" includes="**/*.*"/>
        </copy>
        <mkdir dir="${LOCALESTARGETDIR}/jsyntaxpane/bundle/"/>
        <copy todir="${LOCALESTARGETDIR}/jsyntaxpane/bundle/">
            <fileset dir="libsrc/jsyntaxpane/jsyntaxpane/src/main/resources/jsyntaxpane" includes="**/*.*"/>
        </copy>
        <mkdir dir="${LOCALESTARGETDIR}/jsyntaxpane/defaultsyntaxkit"/>
        <copy todir="${LOCALESTARGETDIR}/jsyntaxpane/defaultsyntaxkit">
            <fileset dir="libsrc/jsyntaxpane/jsyntaxpane/src/main/resources/META-INF/services/jsyntaxpane/defaultsyntaxkit" includes="**/*.*"/>
        </copy>
        <mkdir dir="${LOCALESTARGETDIR}/jsyntaxpane/syntaxkits/flasmsyntaxkit"/>
        <copy todir="${LOCALESTARGETDIR}/jsyntaxpane/syntaxkits/flasmsyntaxkit">
            <fileset dir="libsrc/jsyntaxpane/jsyntaxpane/src/main/resources/META-INF/services/jsyntaxpane/syntaxkits/flasmsyntaxkit" includes="**/config*.properties"/>
        </copy>
        <mkdir dir="${LOCALESTARGETDIR}/jsyntaxpane/syntaxkits/flasm3syntaxkit"/>
        <copy todir="${LOCALESTARGETDIR}/jsyntaxpane/syntaxkits/flasm3syntaxkit">
            <fileset dir="libsrc/jsyntaxpane/jsyntaxpane/src/main/resources/META-INF/services/jsyntaxpane/syntaxkits/flasm3syntaxkit" includes="**/config*.properties"/>
        </copy>
        <mkdir dir="${LOCALESTARGETDIR}/jsyntaxpane/syntaxkits/flasm3methodinfosyntaxkit"/>
        <copy todir="${LOCALESTARGETDIR}/jsyntaxpane/syntaxkits/flasm3methodinfosyntaxkit">
            <fileset dir="libsrc/jsyntaxpane/jsyntaxpane/src/main/resources/META-INF/services/jsyntaxpane/syntaxkits/flasm3methodinfosyntaxkit" includes="**/config*.properties"/>
        </copy>
        <mkdir dir="${LOCALESTARGETDIR}/lib"/>
        <copy todir="${LOCALESTARGETDIR}/lib">
            <fileset dir="${LOCALESLIBDIR}" includes="**/*.*"/>
        </copy>
        <echo file="${LOCALESTARGETDIR}/readme.txt">${PROJECTNAME} ${VERSION}${VERSIONSUFFIX} localization pack
            -------------------------------------------------------------------            
            Please follow instructions on http://www.free-decompiler.com/flash/translations.html
        </echo>
        <property name="lang.file" value="${RELEASESDIR}/${PREFIXFILENAME}_${VERSION}${VERSIONSUFFIX}_lang.zip" />
        <zip destfile="${lang.file}" basedir="${LOCALESTARGETDIR}"/>
    </target>
    
    <target name="-nightly-suffix" if="NIGHTLY">        
        <property name="VERSIONSUFFIX" value="_nightly${version.build}"/>         
    </target>
    
    <target name="-no-suffix" unless="VERSIONSUFFIX">
        <property name="VERSIONSUFFIX" value=""/>         
    </target>
    
    <target name="-private-suffix" if="PRIVATE">
        <property name="VERSIONSUFFIX" value="_private_${GITSHORTTAG}"/>         
    </target>
    
    <target name="-suffix" depends="-nightly-suffix,-private-suffix,-no-suffix">
       
    </target>
    <target name="-timestamp" depends="-loadversion,git-tag">
        <tstamp>
            <format property="BUILTAT" pattern="MM/dd/yyyy hh:mm aa" timezone="CET"/>
            <format property="VERDATE" pattern="yyyyddMM_hhmm" timezone="CET"/>
        </tstamp>        
        <echo level="info" message="Version: ${VERSION}"/>
    </target>
    
    <target name="build_lib">
        <ant antfile="${CORELIBSCRIPT}" target="build" inheritAll="false" usenativebasedir="true"/>
        <copy file="${CORELIBPATH}" todir="${LIBRARIESDIR}" />
    </target>
    
    <target name="clean_lib">
        <ant antfile="${CORELIBSCRIPT}" target="clean" inheritAll="false" usenativebasedir="true" />
        <delete file="${LIBRARIESDIR}/${CORELIBNAME}" />
    </target>
    
    
    <target name="-test_lib-newver" if="NEWVER">
        <ant antfile="${CORELIBSCRIPT}" target="testhalt" inheritAll="false" usenativebasedir="true" />    
    </target>
    
    <target name="-test_lib-nonewver" unless="NEWVER">
        <ant antfile="${CORELIBSCRIPT}" target="test" inheritAll="false" usenativebasedir="true" />    
    </target>
    
    
    <target name="test_lib" depends="-test_lib-newver,-test_lib-nonewver">
    </target>
    
    <target name="git-tag">
        <exec executable="git" outputproperty="GITTAG" failonerror="true">
            <arg value="rev-parse"/>
            <arg value="HEAD"/>
        </exec>  
        <echo level="info" message="${GITTAG}" file="${REVFILE}"/>
        
        
        <loadfile srcfile="${REVFILE}" property="GITSHORTTAG">
            <filterchain>
                <headfilter lines="1" skip="0"/>
                <tokenfilter>
                    <replaceregex pattern="[0-9a-f]{33}$" replace="" flags="gi"/>
                </tokenfilter>
                <striplinebreaks/>
            </filterchain>
        </loadfile>
        <echo level="info" message="Git tag:${GITTAG}"/>
        <echo level="info" message="Git shorttag:${GITSHORTTAG}"/>
    </target>
    
    <target name="build" depends="-loadversion,build_lib,-timestamp,-suffix,compile">        
        <mkdir dir="${DISTRIBUTIONDIR}"/>
        <!-- <delete dir="${DISTLIBRARIESFULLDIR}"/> -->
        <mkdir dir="${DISTLIBRARIESFULLDIR}"/>
        <copy todir="${DISTLIBRARIESFULLDIR}">
            <fileset dir="${LIBRARIESDIR}" includes="**/*.jar"/>
            <fileset dir="${LIBRARIESDIR}" includes="**/*.exe"/>
            <fileset dir="${LIBRARIESDIR}" includes="**/*.txt"/>            
        </copy>
        
        
                                                     
        <propertyfile file="${COMPILEDIR}/${PROPERTIESNAME}"
                      comment="This file is automatically generated - DO NOT EDIT">        
            <entry key="buildtime" value="${BUILTAT}"/>
            <entry key="build" value="${GITTAG}"/>
            <entry key="builder" value="${BUILDER}"/>             
            <entry key="version" value="${VERSION}"/>          
            <entry key="nightly" value="${NIGHTLY}"/>
            
            <entry key="version.major" value="${version.major}"/>
            <entry key="version.minor" value="${version.minor}"/>
            <entry key="version.release" value="${version.release}"/>
            <entry key="version.build" value="${version.build}"/>
            <entry key="version.debug" value="${version.debug}"/>
        </propertyfile>
        
        <pathconvert pathsep=" " property="manifestClassPath">
            <fileset dir="${DISTRIBUTIONDIR}" includes="${DISTLIBRARIESDIRNAME}/**/*.*"/>
            <chainedmapper>
                <flattenmapper/>
                <globmapper from="*" to="${DISTLIBRARIESDIRNAME}/*"/>
            </chainedmapper>
        </pathconvert>

        <jar destfile="${DISTRIBUTIONDIR}/${JARFILENAME}.jar" basedir="${COMPILEDIR}">
            <manifest>
                <attribute name="Main-Class" value="${MAINCLASS}"/>
                <attribute name="Class-Path" value="${manifestClassPath}"/>
            </manifest>
        </jar>
    </target>

    <target name="run" depends="build">
        <java jar="${DISTRIBUTIONDIR}/${JARFILENAME}.jar" fork="true">
            <jvmarg value="-Xmx${MAXHEAPSIZERUN}m" />
            <jvmarg value="-Djava.net.preferIPv4Stack=true" />
            <arg line="${RUNPARAMS}" />
        </java>
    </target>


    <target name="javadoc">
        <mkdir dir="${JAVADOCDIR}"/>
        <javadoc sourcepath="${SOURCEDIR}" destdir="${JAVADOCDIR}" windowtitle="${PROJECTNAME}"
                 useexternalfile="yes">
            <fileset dir="${SOURCEDIR}" includes="**/*.java"/>
            <classpath>
                <fileset dir="${LIBRARIESDIR}" includes="**/*.jar"/>
            </classpath>
        </javadoc>
    </target>
    <target name="clean" depends="clean_lib">        
        <delete dir="${DISTRIBUTIONDIR}"/>
        <delete dir="${COMPILETESTSDIR}"/>
        <delete dir="${COMPILEDIR}"/>
        <delete dir="${COVERAGEDIR}"/>
        <delete dir="${TESTRESULTSDIR}"/>
        <delete dir="${LOCALESTARGETDIR}"/>
        <delete dir="${INSTRDIR}"/>
    </target>
    
    <!-- Debug one test method (Netbeans IDE) -->
    <target name="debug-test-method" depends="compile-tests">
        <fail unless="test.class">Must select one file in the IDE or set test.class</fail>
        <fail unless="test.method">Must select some method in the IDE or set test.method</fail>
        <delete dir="${TESTRESULTSDIR}"/>
        <mkdir dir="${TESTRESULTSDIR}"/>
        <mkdir dir="${TESTRESULTSDIR}/raw/"/>
     
        <nbjpdastart addressproperty="jpda.address" name="ffdec" transport="dt_socket">
            <classpath>
                <pathelement path="${COMPILEDIR}"/>
                <fileset dir="${LIBRARIESDIR}" includes="**/*.jar"/>
                <fileset dir="${TESTLIBDIR}" includes="**/*.jar"/>
            </classpath>
        </nbjpdastart>
        <taskdef classname="org.testng.TestNGAntTask" classpath="${TESTLIBDIR}/testng-6.8.jar" name="testng" />
    
        <testng 
            outputDir="${TESTRESULTSDIR}"
            haltOnFailure="false" verbose="2" workingDir="${basedir}" methods="${test.class}.${test.method}">
        
            <classpath>
                <pathelement path="${COMPILETESTSDIR}"/>
                <pathelement path="${INSTRDIR}"/>
                <pathelement path="${COMPILEDIR}"/>
                <fileset dir="${LIBRARIESDIR}" includes="**/*.jar"/>
                <fileset dir="${TESTLIBDIR}" includes="**/*.jar"/>
            </classpath>
            <jvmarg value="-noverify" />
            <jvmarg value="-Xdebug"/>
            <jvmarg value="-Xrunjdwp:transport=dt_socket,address=${jpda.address}"/>
            <classfileset dir="${COMPILETESTSDIR}" includes="**/*.class" />                                    
        </testng>     
    </target>
    
    
    <target name="git-pull">
        <exec executable="git" failonerror="true">
            <arg value="pull"/>            
        </exec> 
    </target>
    
    <target name="git-push">
        <!-- NOTHING -->       
    </target>
    
    <target name="-git-commit-versioninfo">        
        <exec executable="git" failonerror="true">
            <arg value="add"/>            
            <arg value="version.properties"/>
        </exec>
        <exec executable="git" failonerror="true">
            <arg value="commit"/>            
            <arg value="-m"/>
            <arg value="version changed to ${newversion.major}.${newversion.minor}.${newversion.release} build ${newversion.build}"/>
        </exec> 
    </target>
    
    <target name="-loadoldversion">
        <loadproperties srcfile="version.properties" prefix="oldversion" />
    </target>
    
    <target name="-inc-major">
        <property name="newversion.type" value="major"/>
    </target>
    
    <target name="-inc-minor">
        <property name="newversion.type" value="minor"/>
    </target>
    
    <target name="-inc-release">
        <property name="newversion.type" value="release"/> 
    </target>
    
    <target name="-inc-nightlybuild">
        <property name="newversion.type" value="nightly"/>
    </target>   
    
    <target name="-save-version-info-file">        
        <propertyfile file="version.properties"
                      comment="DO NOT MODIFY - it is updated automatically with the build script">                               
            <entry key="major" value="${newversion.major}"/>
            <entry key="minor" value="${newversion.minor}"/>
            <entry key="release" value="${newversion.release}"/>
            <entry key="build" value="${newversion.build}"/>
            <entry key="debug" value="${newversion.debug}"/>
        </propertyfile>        
    </target>     
    
    <target name="-save-version-info" depends="-save-version-info-file,-git-commit-versioninfo">        
        
    </target>
    
    <target name="-new-version-set">
        <property name="NEWVER" value="1" />
    </target>
    
    <target name="new-version-major" depends="git-pull,-new-version-set,-inc-major,-check-version-online,all,-upload,git-push">
        
    </target>
    
    <target name="new-version-minor" depends="git-pull,-new-version-set,-inc-minor,-check-version-online,all,-upload,git-push">
        
    </target>
    
    <target name="new-version-release" depends="git-pull,-new-version-set,-inc-release,-check-version-online,all,-upload,git-push">
       
    </target>
       
        
    <target name="new-version-nightlybuild" depends="git-pull,-new-version-set,-inc-nightlybuild,-check-version-online,all,-upload,git-push">

    </target>
    
    
    <target name="upload-last" depends="all,-upload">
        
    </target>                        
</project>
